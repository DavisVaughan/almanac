[{"path":[]},{"path":"/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 almanac authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/dev/articles/adjust-and-shift.html","id":"adjusting","dir":"Articles","previous_headings":"","what":"Adjusting","title":"Adjusting and shifting dates","text":"“Adjusting” date defines behavior happens date lands event rschedule’s event set. example, date currently Christmas, adjust forward next non-event date, adjust backwards previous non-event date, adjust nearest non-event date. logic perform adjustments encoded following adjustment functions: adj_following() Choose first non-event date x. adj_preceding() Choose first non-event date x. adj_modified_following() Choose first non-event date x, unless falls different month, case first non-event date x chosen instead. adj_modified_preceding() Choose first non-event date x, unless falls different month, case first non-event date x chosen instead. adj_nearest() Choose nearest non-event date x. closest preceding following non-event dates equally far away, following non-event date chosen. adj_none() Performs adjustment returns x unchanged. use adjustment function, ’ll need rschedule contains event set interested adjusting around. provide , along dates interested adjusting, adj_*() function. adj_nearest() function particularly useful date weekend want roll back Friday falls Saturday roll forward Monday falls Sunday.","code":"on_christmas <- yearly() %>%   recur_on_mday(25) %>%   recur_on_ymonth(\"Dec\")  x <- as.Date(c(\"2019-12-24\", \"2019-12-25\"))  adj_following(x, on_christmas) #> [1] \"2019-12-24\" \"2019-12-26\"  adj_preceding(x, on_christmas) #> [1] \"2019-12-24\" \"2019-12-24\" # Saturday / Sunday x <- as.Date(c(\"2019-12-21\", \"2019-12-22\"))  on_weekends <- weekly() %>%   recur_on_weekends()  # Roll Saturday backwards and Sunday forwards adj_nearest(x, on_weekends) #> [1] \"2019-12-20\" \"2019-12-23\""},{"path":"/dev/articles/adjust-and-shift.html","id":"adjusted-rschedules","dir":"Articles","previous_headings":"","what":"Adjusted rschedules","title":"Adjusting and shifting dates","text":"introduction vignette, introduced number different rschedules. reminder, rschedule just general term rrule rbundle. actually third type rschedule almanac, called radjusted, useful combined adjustment functions. motivate , imagine company deems Christmas holiday. Whenever Christmas rolls around 25th December, get day . happens Christmas falls Saturday? Sunday? corporations observe holiday falls weekend nearest working day instead weekend date actually occurred . almanac, seems like pose problem. can create rrules Christmas weekends, rbundle like runion, rintersect, rsetdiff perform kind set operation . really need way say: recur dates defined rschedule, unless intersects second rschedule. cases, apply adjustment intersected dates create valid dates. job radjusted. just another rschedule, can used alma_*() functions ’ve seen far. example, can confirm Christmas dates fall weekend adjusted appropriately searching .","code":"on_adjusted_christmas <- radjusted(   rschedule = on_christmas,    adjust_on = on_weekends,   adjustment = adj_nearest )  on_adjusted_christmas #> <radjusted> #>  #> Adjust: #> <rrule[yearly / 1900-01-01 / 2100-01-01]> #> - ymonth: Dec #> - mday: 25 #>  #> Adjust on: #> <rrule[weekly / 1900-01-01 / 2100-01-01]> #> - wday: Sat, Sun # Note 2004-12-24, which was rolled back from 2004-12-25, a Saturday. # Note 2005-12-26, which was rolled forward from 2005-12-25, a Sunday. alma_search(\"2002-01-01\", \"2008-01-01\", on_adjusted_christmas) #> [1] \"2002-12-25\" \"2003-12-25\" \"2004-12-24\" \"2005-12-26\" \"2006-12-25\" #> [6] \"2007-12-25\""},{"path":"/dev/articles/adjust-and-shift.html","id":"stepping","dir":"Articles","previous_headings":"","what":"Stepping","title":"Adjusting and shifting dates","text":"alma_step() allows take existing vector dates shift number days, “stepping ” events event set defined rschedule. generally useful shifting “N business days”, logic business day encapsulated rschedule. can think alma_step() way replace lubridate’s x + days(5) x + business_days(5) business_days() specific company’s holiday calendar. following example, shift Thursday Friday 1 working day. Notice Friday shifted forward Monday. Internally, n applied 1 day time. adj_following() called 1 day shift n positive, otherwise adj_preceding() called. break , ’ll analyze Friday. Start 2019-12-20, Friday. Step forward 1 day, 2019-12-21, Saturday. Apply adj_following(), landing us Monday, 2019-12-23. can shift backwards negative n. ’s also fully vectorized, can use different signs n call. example, let’s consider happens start non-event date. , start Saturday Sunday, apply +1 -1 day shift , respectively. Saturday, apply 1 day shift, landing Sunday, call adj_following(), landing Monday. Sunday, apply -1 day shift, landing Saturday, call adj_preceding(), landing Friday.","code":"# A Thursday / Friday pair x <- as.Date(c(\"2019-12-19\", \"2019-12-20\"))  # Shift by 1 working day, stepping over weekends step <- alma_step(x, n = 1, rschedule = on_weekends)  data.frame(   x = x,   x_wday = wday(x, label = TRUE),   step = step,   step_wday = wday(step, label = TRUE) ) #>            x x_wday       step step_wday #> 1 2019-12-19    Thu 2019-12-20       Fri #> 2 2019-12-20    Fri 2019-12-23       Mon # A Saturday / Sunday pair x <- as.Date(c(\"2019-12-21\", \"2019-12-22\"))  step <- alma_step(x, c(1, -1), on_weekends)  data.frame(   x = x,   x_wday = wday(x, label = TRUE),   step = step,   step_wday = wday(step, label = TRUE) ) #>            x x_wday       step step_wday #> 1 2019-12-21    Sat 2019-12-23       Mon #> 2 2019-12-22    Sun 2019-12-20       Fri"},{"path":"/dev/articles/adjust-and-shift.html","id":"steppers","dir":"Articles","previous_headings":"","what":"Steppers","title":"Adjusting and shifting dates","text":"alma_step() nice, really nice something like lubridate’s x + days(5) syntax, relative rschedule. Due issues R’s S3 dispatch system works +, isn’t exactly replicable almanac, can get close (lubridate uses R’s S4 object oriented system get work, don’t want go ). First , need object holds information shift relative rschedule. can create one stepper(). thing give stepper() rschedule step relative . returns function 1 argument, n, ’ll call desired number days shift. resulting object can added subtracted vector dates. sounds little complicated, hopefully things clear example. Let’s reproduce last example previous section: Notice usage %s+%. replaces +, allows step forward. also %s-% stepping backwards. nice thing working_day can continue use date vectors.","code":"working_day <- stepper(on_weekends)  x %s+% working_day(c(1, -1)) #> [1] \"2019-12-23\" \"2019-12-20\" # A Wednesday wednesday <- as.Date(\"2019-12-18\")  # Returns Thursday, Friday, Monday wednesday %s+% working_day(1:3) #> [1] \"2019-12-19\" \"2019-12-20\" \"2019-12-23\""},{"path":"/dev/articles/almanac.html","id":"recurrence-rules","dir":"Articles","previous_headings":"","what":"Recurrence Rules","title":"Introduction to almanac","text":"recurrence rule structured object determines date counted event . basic level, job recurrence rule search pre-specified range dates flag event dates range. build recurrence rule, start base recurrence frequency. 4 frequencies choose : daily() weekly() monthly() yearly() Take yearly() frequency, example. default, declare 1 value per year event. return value yearly() rrule object, short “recurrence rule”. base object need start something useful. example, can pass rrule alma_search() along date, return events date range. want yearly value, want January 5th every year, rather 1st? yearly() important argument called since controls two things: start date recurrence rule, information month, day month use conditions specified override . default since set 1900-01-01, arbitrary. default example alma_search() get values January 1st. Let’s change . Now since date set 1990, try find yearly dates 1990, included. also argument yearly() controls upper bound range look . arbitrarily set 2100-01-01, can expanded contracted required.","code":"on_yearly <- yearly() on_yearly #> <rrule[yearly / 1900-01-01 / 2100-01-01]> alma_search(from = \"1990-01-01\", to = \"1995-12-31\", on_yearly) #> [1] \"1990-01-01\" \"1991-01-01\" \"1992-01-01\" \"1993-01-01\" \"1994-01-01\" #> [6] \"1995-01-01\" on_yearly_jan_5 <- yearly(since = \"1990-01-05\")  alma_search(\"1990-01-01\", \"1995-12-31\", on_yearly_jan_5) #> [1] \"1990-01-05\" \"1991-01-05\" \"1992-01-05\" \"1993-01-05\" \"1994-01-05\" #> [6] \"1995-01-05\" # Same result as above, because the 1988 and 1989 dates are not included.  alma_search(\"1988-01-01\", \"1995-12-31\", on_yearly_jan_5) #> [1] \"1990-01-05\" \"1991-01-05\" \"1992-01-05\" \"1993-01-05\" \"1994-01-05\" #> [6] \"1995-01-05\""},{"path":"/dev/articles/almanac.html","id":"event-set","dir":"Articles","previous_headings":"","what":"Event Set","title":"Introduction to almanac","text":"mentioned earlier job recurrence rule flag dates pre-specified range events . dates flagged events known event set. previous example, used alma_search() extract subset dates event set . can get entire event set alma_events(). Notice bounded custom since date, default upper bound. Otherwise ’d infinite event set, nice theory bad practice. can also check existing date included recurrence rule’s event set alma_in().","code":"alma_events(on_yearly_jan_5) #>   [1] \"1990-01-05\" \"1991-01-05\" \"1992-01-05\" \"1993-01-05\" \"1994-01-05\" #>   [6] \"1995-01-05\" \"1996-01-05\" \"1997-01-05\" \"1998-01-05\" \"1999-01-05\" #>  [11] \"2000-01-05\" \"2001-01-05\" \"2002-01-05\" \"2003-01-05\" \"2004-01-05\" #>  [16] \"2005-01-05\" \"2006-01-05\" \"2007-01-05\" \"2008-01-05\" \"2009-01-05\" #>  [21] \"2010-01-05\" \"2011-01-05\" \"2012-01-05\" \"2013-01-05\" \"2014-01-05\" #>  [26] \"2015-01-05\" \"2016-01-05\" \"2017-01-05\" \"2018-01-05\" \"2019-01-05\" #>  [31] \"2020-01-05\" \"2021-01-05\" \"2022-01-05\" \"2023-01-05\" \"2024-01-05\" #>  [36] \"2025-01-05\" \"2026-01-05\" \"2027-01-05\" \"2028-01-05\" \"2029-01-05\" #>  [41] \"2030-01-05\" \"2031-01-05\" \"2032-01-05\" \"2033-01-05\" \"2034-01-05\" #>  [46] \"2035-01-05\" \"2036-01-05\" \"2037-01-05\" \"2038-01-05\" \"2039-01-05\" #>  [51] \"2040-01-05\" \"2041-01-05\" \"2042-01-05\" \"2043-01-05\" \"2044-01-05\" #>  [56] \"2045-01-05\" \"2046-01-05\" \"2047-01-05\" \"2048-01-05\" \"2049-01-05\" #>  [61] \"2050-01-05\" \"2051-01-05\" \"2052-01-05\" \"2053-01-05\" \"2054-01-05\" #>  [66] \"2055-01-05\" \"2056-01-05\" \"2057-01-05\" \"2058-01-05\" \"2059-01-05\" #>  [71] \"2060-01-05\" \"2061-01-05\" \"2062-01-05\" \"2063-01-05\" \"2064-01-05\" #>  [76] \"2065-01-05\" \"2066-01-05\" \"2067-01-05\" \"2068-01-05\" \"2069-01-05\" #>  [81] \"2070-01-05\" \"2071-01-05\" \"2072-01-05\" \"2073-01-05\" \"2074-01-05\" #>  [86] \"2075-01-05\" \"2076-01-05\" \"2077-01-05\" \"2078-01-05\" \"2079-01-05\" #>  [91] \"2080-01-05\" \"2081-01-05\" \"2082-01-05\" \"2083-01-05\" \"2084-01-05\" #>  [96] \"2085-01-05\" \"2086-01-05\" \"2087-01-05\" \"2088-01-05\" \"2089-01-05\" #> [101] \"2090-01-05\" \"2091-01-05\" \"2092-01-05\" \"2093-01-05\" \"2094-01-05\" #> [106] \"2095-01-05\" \"2096-01-05\" \"2097-01-05\" \"2098-01-05\" \"2099-01-05\" # Uses the 10th of the month, pulled from `since` on_monthly <- monthly(since = \"1990-01-10\")  x <- as.Date(\"2000-01-08\") + 0:5 x #> [1] \"2000-01-08\" \"2000-01-09\" \"2000-01-10\" \"2000-01-11\" \"2000-01-12\" #> [6] \"2000-01-13\"  x_in_set <- alma_in(x, on_monthly) x_in_set #> [1] FALSE FALSE  TRUE FALSE FALSE FALSE  x[x_in_set] #> [1] \"2000-01-10\""},{"path":"/dev/articles/almanac.html","id":"caching","dir":"Articles","previous_headings":"Event Set","what":"Caching","title":"Introduction to almanac","text":"almanac attempts smart caching event set recurrence rule first time queried. means first usage recurrence rule generally slower repeated uses.","code":"since <- \"1990-01-01\"  on_weekly <- weekly(since = since)  # The first time is \"slow\" system.time(alma_search(since, \"2000-01-01\", on_weekly)) #>    user  system elapsed  #>   0.114   0.000   0.097  # Repeated access is fast system.time(alma_search(since, \"2000-01-01\", on_weekly)) #>    user  system elapsed  #>   0.000   0.000   0.001  # The entire event set is cached, so even if you change the arguments, # the operation is still fast. system.time(alma_search(since, \"1990-05-01\", on_weekly)) #>    user  system elapsed  #>       0       0       0"},{"path":"/dev/articles/almanac.html","id":"recurrence-conditions","dir":"Articles","previous_headings":"","what":"Recurrence Conditions","title":"Introduction to almanac","text":"far worked base recurrence rules. Things get much interesting start adding extra conditions rules. Conditions ways limit expand given recurrence rule hone recurring dates particularly interested . condition functions almanac start recur_*(). example, let’s take monthly rule, defaults give us 1 day per month, expand give us every 4th 16th day month. important thing note even though since date first month, “overriding” recurrence condition, information used. Recurrence rules can continually added refine rule. add condition rule, get another rule back. Let’s try creating rule recurring holiday, Labor Day. recurs first Monday September, yearly. , : Use yearly() base since happens 1 time per year. Use recur_on_ymonth() hone September. Use recur_on_wday() hone first Monday month. nth argument recur_on_wday() especially useful selecting end month. wanted last Monday September instead, :","code":"on_4th_and_16th <- monthly(since = \"2000-01-01\") %>%   recur_on_mday(c(4, 16))  alma_search(\"2000-01-01\", \"2000-06-01\", on_4th_and_16th) #>  [1] \"2000-01-04\" \"2000-01-16\" \"2000-02-04\" \"2000-02-16\" \"2000-03-04\" #>  [6] \"2000-03-16\" \"2000-04-04\" \"2000-04-16\" \"2000-05-04\" \"2000-05-16\" on_labor_day <- yearly() %>%   recur_on_ymonth(\"Sep\") %>%   recur_on_wday(\"Monday\", nth = 1)  alma_search(\"2000-01-01\", \"2005-01-01\", on_labor_day) #> [1] \"2000-09-04\" \"2001-09-03\" \"2002-09-02\" \"2003-09-01\" \"2004-09-06\" on_last_monday_in_sept <- yearly(since = \"2000-01-01\") %>%   recur_on_ymonth(\"Sep\") %>%   recur_on_wday(\"Monday\", nth = -1)  alma_search(\"2000-01-01\", \"2005-01-01\", on_last_monday_in_sept) #> [1] \"2000-09-25\" \"2001-09-24\" \"2002-09-30\" \"2003-09-29\" \"2004-09-27\""},{"path":"/dev/articles/almanac.html","id":"recurrence-bundles","dir":"Articles","previous_headings":"","what":"Recurrence Bundles","title":"Introduction to almanac","text":"Recurrence rules powerful tools , aren’t enough solve every task. Say want construct rule includes Christmas Labor Day events. impossible construct kind event set using single rule, bundle multiple rules together, one Christmas one Labor Day, possible. rbundle bundle recurrence schedules. recurrence schedule, rschedule, overarching term rrules rbundles. three types rbundles almanac. create event set performing kind set operation event sets underlying rschedules added bundle. runion() takes union. rintersect() takes intersection. rsetdiff() takes set difference. rbundles can also contain specialized dates want forcibly include event set, called rdates, ones want forcibly exclude, called exdates. useful rbundle runion, allows construct event set , example, falls multiple holidays weekends. following creates runion rrules based Christmas Labor Day. recurrence bundle critical data structure almanac. serves general container dump company’s holiday weekend recurrence rules.","code":"on_christmas <- yearly() %>%   recur_on_ymonth(\"Dec\") %>%   recur_on_mday(25)  christmas_or_labor_day <- runion() %>%   add_rschedule(on_christmas) %>%   add_rschedule(on_labor_day)  alma_search(\"2000-01-01\", \"2002-01-01\", christmas_or_labor_day) #> [1] \"2000-09-04\" \"2000-12-25\" \"2001-09-03\" \"2001-12-25\"  christmas_or_labor_day_except_2000_labor_day <- christmas_or_labor_day %>%   add_exdates(\"2000-09-04\")  alma_search(\"2000-01-01\", \"2002-01-01\", christmas_or_labor_day_except_2000_labor_day) #> [1] \"2000-12-25\" \"2001-09-03\" \"2001-12-25\""},{"path":"/dev/articles/icalendar.html","id":"daily-for-10-events","dir":"Articles","previous_headings":"","what":"Daily for 10 events","title":"iCalendar specification","text":"","code":"rrule <- daily(since) %>%   recur_for_count(10)  alma_search(since, to, rrule) #>  [1] \"1997-09-02\" \"1997-09-03\" \"1997-09-04\" \"1997-09-05\" \"1997-09-06\" #>  [6] \"1997-09-07\" \"1997-09-08\" \"1997-09-09\" \"1997-09-10\" \"1997-09-11\""},{"path":"/dev/articles/icalendar.html","id":"daily-until-1997-12-24","dir":"Articles","previous_headings":"","what":"Daily until 1997-12-24","title":"iCalendar specification","text":"","code":"rrule <- daily(since, until = \"1997-12-24\")  alma_search(since, to, rrule) #>   [1] \"1997-09-02\" \"1997-09-03\" \"1997-09-04\" \"1997-09-05\" \"1997-09-06\" #>   [6] \"1997-09-07\" \"1997-09-08\" \"1997-09-09\" \"1997-09-10\" \"1997-09-11\" #>  [11] \"1997-09-12\" \"1997-09-13\" \"1997-09-14\" \"1997-09-15\" \"1997-09-16\" #>  [16] \"1997-09-17\" \"1997-09-18\" \"1997-09-19\" \"1997-09-20\" \"1997-09-21\" #>  [21] \"1997-09-22\" \"1997-09-23\" \"1997-09-24\" \"1997-09-25\" \"1997-09-26\" #>  [26] \"1997-09-27\" \"1997-09-28\" \"1997-09-29\" \"1997-09-30\" \"1997-10-01\" #>  [31] \"1997-10-02\" \"1997-10-03\" \"1997-10-04\" \"1997-10-05\" \"1997-10-06\" #>  [36] \"1997-10-07\" \"1997-10-08\" \"1997-10-09\" \"1997-10-10\" \"1997-10-11\" #>  [41] \"1997-10-12\" \"1997-10-13\" \"1997-10-14\" \"1997-10-15\" \"1997-10-16\" #>  [46] \"1997-10-17\" \"1997-10-18\" \"1997-10-19\" \"1997-10-20\" \"1997-10-21\" #>  [51] \"1997-10-22\" \"1997-10-23\" \"1997-10-24\" \"1997-10-25\" \"1997-10-26\" #>  [56] \"1997-10-27\" \"1997-10-28\" \"1997-10-29\" \"1997-10-30\" \"1997-10-31\" #>  [61] \"1997-11-01\" \"1997-11-02\" \"1997-11-03\" \"1997-11-04\" \"1997-11-05\" #>  [66] \"1997-11-06\" \"1997-11-07\" \"1997-11-08\" \"1997-11-09\" \"1997-11-10\" #>  [71] \"1997-11-11\" \"1997-11-12\" \"1997-11-13\" \"1997-11-14\" \"1997-11-15\" #>  [76] \"1997-11-16\" \"1997-11-17\" \"1997-11-18\" \"1997-11-19\" \"1997-11-20\" #>  [81] \"1997-11-21\" \"1997-11-22\" \"1997-11-23\" \"1997-11-24\" \"1997-11-25\" #>  [86] \"1997-11-26\" \"1997-11-27\" \"1997-11-28\" \"1997-11-29\" \"1997-11-30\" #>  [91] \"1997-12-01\" \"1997-12-02\" \"1997-12-03\" \"1997-12-04\" \"1997-12-05\" #>  [96] \"1997-12-06\" \"1997-12-07\" \"1997-12-08\" \"1997-12-09\" \"1997-12-10\" #> [101] \"1997-12-11\" \"1997-12-12\" \"1997-12-13\" \"1997-12-14\" \"1997-12-15\" #> [106] \"1997-12-16\" \"1997-12-17\" \"1997-12-18\" \"1997-12-19\" \"1997-12-20\" #> [111] \"1997-12-21\" \"1997-12-22\" \"1997-12-23\" \"1997-12-24\""},{"path":"/dev/articles/icalendar.html","id":"every-other-day-forever","dir":"Articles","previous_headings":"","what":"Every other day, forever","title":"iCalendar specification","text":"","code":"rrule <- daily(since) %>%   recur_on_interval(2)  alma_search(since, \"1997-10-01\", rrule) #>  [1] \"1997-09-02\" \"1997-09-04\" \"1997-09-06\" \"1997-09-08\" \"1997-09-10\" #>  [6] \"1997-09-12\" \"1997-09-14\" \"1997-09-16\" \"1997-09-18\" \"1997-09-20\" #> [11] \"1997-09-22\" \"1997-09-24\" \"1997-09-26\" \"1997-09-28\" \"1997-09-30\""},{"path":"/dev/articles/icalendar.html","id":"every-10-days-5-events","dir":"Articles","previous_headings":"","what":"Every 10 days, 5 events","title":"iCalendar specification","text":"","code":"rrule <- daily(since) %>%   recur_on_interval(10) %>%   recur_for_count(5)  alma_search(since, to, rrule) #> [1] \"1997-09-02\" \"1997-09-12\" \"1997-09-22\" \"1997-10-02\" \"1997-10-12\""},{"path":"/dev/articles/icalendar.html","id":"every-day-in-january-for-3-years","dir":"Articles","previous_headings":"","what":"Every day in January, for 3 years","title":"iCalendar specification","text":"","code":"rrule <- daily(since = \"1998-01-01\", until = \"2000-01-31\") %>%   recur_on_ymonth(\"January\")  alma_search(since, to, rrule) #>  [1] \"1998-01-01\" \"1998-01-02\" \"1998-01-03\" \"1998-01-04\" \"1998-01-05\" #>  [6] \"1998-01-06\" \"1998-01-07\" \"1998-01-08\" \"1998-01-09\" \"1998-01-10\" #> [11] \"1998-01-11\" \"1998-01-12\" \"1998-01-13\" \"1998-01-14\" \"1998-01-15\" #> [16] \"1998-01-16\" \"1998-01-17\" \"1998-01-18\" \"1998-01-19\" \"1998-01-20\" #> [21] \"1998-01-21\" \"1998-01-22\" \"1998-01-23\" \"1998-01-24\" \"1998-01-25\" #> [26] \"1998-01-26\" \"1998-01-27\" \"1998-01-28\" \"1998-01-29\" \"1998-01-30\" #> [31] \"1998-01-31\" \"1999-01-01\" \"1999-01-02\" \"1999-01-03\" \"1999-01-04\" #> [36] \"1999-01-05\" \"1999-01-06\" \"1999-01-07\" \"1999-01-08\" \"1999-01-09\" #> [41] \"1999-01-10\" \"1999-01-11\" \"1999-01-12\" \"1999-01-13\" \"1999-01-14\" #> [46] \"1999-01-15\" \"1999-01-16\" \"1999-01-17\" \"1999-01-18\" \"1999-01-19\" #> [51] \"1999-01-20\" \"1999-01-21\" \"1999-01-22\" \"1999-01-23\" \"1999-01-24\" #> [56] \"1999-01-25\" \"1999-01-26\" \"1999-01-27\" \"1999-01-28\" \"1999-01-29\" #> [61] \"1999-01-30\" \"1999-01-31\" \"2000-01-01\" \"2000-01-02\" \"2000-01-03\" #> [66] \"2000-01-04\" \"2000-01-05\" \"2000-01-06\" \"2000-01-07\" \"2000-01-08\" #> [71] \"2000-01-09\" \"2000-01-10\" \"2000-01-11\" \"2000-01-12\" \"2000-01-13\" #> [76] \"2000-01-14\" \"2000-01-15\" \"2000-01-16\" \"2000-01-17\" \"2000-01-18\" #> [81] \"2000-01-19\" \"2000-01-20\" \"2000-01-21\" \"2000-01-22\" \"2000-01-23\" #> [86] \"2000-01-24\" \"2000-01-25\" \"2000-01-26\" \"2000-01-27\" \"2000-01-28\" #> [91] \"2000-01-29\" \"2000-01-30\" \"2000-01-31\""},{"path":"/dev/articles/icalendar.html","id":"weekly-for-10-events","dir":"Articles","previous_headings":"","what":"Weekly for 10 events","title":"iCalendar specification","text":"","code":"rrule <- weekly(since) %>%   recur_for_count(10)  alma_search(since, to, rrule) #>  [1] \"1997-09-02\" \"1997-09-09\" \"1997-09-16\" \"1997-09-23\" \"1997-09-30\" #>  [6] \"1997-10-07\" \"1997-10-14\" \"1997-10-21\" \"1997-10-28\" \"1997-11-04\""},{"path":"/dev/articles/icalendar.html","id":"weekly-until-december-24-1997","dir":"Articles","previous_headings":"","what":"Weekly until December 24, 1997","title":"iCalendar specification","text":"","code":"rrule <- weekly(since, until = \"1997-12-24\")  alma_search(since, to, rrule) #>  [1] \"1997-09-02\" \"1997-09-09\" \"1997-09-16\" \"1997-09-23\" \"1997-09-30\" #>  [6] \"1997-10-07\" \"1997-10-14\" \"1997-10-21\" \"1997-10-28\" \"1997-11-04\" #> [11] \"1997-11-11\" \"1997-11-18\" \"1997-11-25\" \"1997-12-02\" \"1997-12-09\" #> [16] \"1997-12-16\" \"1997-12-23\""},{"path":"/dev/articles/icalendar.html","id":"every-other-week---forever","dir":"Articles","previous_headings":"","what":"Every other week - forever","title":"iCalendar specification","text":"","code":"rrule <- weekly(since) %>%   recur_on_interval(2)  alma_search(since, \"1997-11-01\", rrule) #> [1] \"1997-09-02\" \"1997-09-16\" \"1997-09-30\" \"1997-10-14\" \"1997-10-28\""},{"path":"/dev/articles/icalendar.html","id":"weekly-on-tuesday-and-thursday-for-five-weeks","dir":"Articles","previous_headings":"","what":"Weekly on Tuesday and Thursday for five weeks","title":"iCalendar specification","text":"","code":"rrule <- weekly(since) %>%   recur_on_wday(c(\"Tue\", \"Thur\")) %>%   recur_for_count(10)  alma_search(since, to, rrule) #>  [1] \"1997-09-02\" \"1997-09-04\" \"1997-09-09\" \"1997-09-11\" \"1997-09-16\" #>  [6] \"1997-09-18\" \"1997-09-23\" \"1997-09-25\" \"1997-09-30\" \"1997-10-02\""},{"path":"/dev/articles/icalendar.html","id":"every-other-week-on-monday-wednesday-and-friday-until-december-24-1997-starting-on-monday-september-1-1997","dir":"Articles","previous_headings":"","what":"Every other week on Monday, Wednesday, and Friday until December 24, 1997, starting on Monday, September 1, 1997","title":"iCalendar specification","text":"","code":"rrule <- weekly(since = \"1997-09-01\", until = \"1997-12-24\") %>%   recur_on_wday(c(\"Mon\", \"Wed\", \"Fri\")) %>%   recur_on_interval(2)  alma_search(\"1997-09-01\", to, rrule) #>  [1] \"1997-09-01\" \"1997-09-03\" \"1997-09-05\" \"1997-09-15\" \"1997-09-17\" #>  [6] \"1997-09-19\" \"1997-09-29\" \"1997-10-01\" \"1997-10-03\" \"1997-10-13\" #> [11] \"1997-10-15\" \"1997-10-17\" \"1997-10-27\" \"1997-10-29\" \"1997-10-31\" #> [16] \"1997-11-10\" \"1997-11-12\" \"1997-11-14\" \"1997-11-24\" \"1997-11-26\" #> [21] \"1997-11-28\" \"1997-12-08\" \"1997-12-10\" \"1997-12-12\" \"1997-12-22\" #> [26] \"1997-12-24\""},{"path":"/dev/articles/icalendar.html","id":"every-other-week-on-tuesday-and-thursday-for-8-events","dir":"Articles","previous_headings":"","what":"Every other week on Tuesday and Thursday, for 8 events","title":"iCalendar specification","text":"","code":"rrule <- weekly(since) %>%   recur_on_wday(c(\"Tue\", \"Thu\")) %>%   recur_on_interval(2) %>%   recur_for_count(8)  alma_search(since, to, rrule) #> [1] \"1997-09-02\" \"1997-09-04\" \"1997-09-16\" \"1997-09-18\" \"1997-09-30\" #> [6] \"1997-10-02\" \"1997-10-14\" \"1997-10-16\""},{"path":"/dev/articles/icalendar.html","id":"monthly-on-the-first-friday-for-10-events","dir":"Articles","previous_headings":"","what":"Monthly on the first Friday for 10 events","title":"iCalendar specification","text":"","code":"rrule <- monthly(\"1997-09-05\") %>%   recur_on_wday(\"Fri\", nth = 1) %>%   recur_for_count(10)  alma_search(since, to, rrule) #>  [1] \"1997-09-05\" \"1997-10-03\" \"1997-11-07\" \"1997-12-05\" \"1998-01-02\" #>  [6] \"1998-02-06\" \"1998-03-06\" \"1998-04-03\" \"1998-05-01\" \"1998-06-05\""},{"path":"/dev/articles/icalendar.html","id":"monthly-on-the-first-friday-until-december-24-1997","dir":"Articles","previous_headings":"","what":"Monthly on the first Friday until December 24, 1997","title":"iCalendar specification","text":"","code":"rrule <- monthly(since = \"1997-09-05\", until = \"1997-12-24\") %>%   recur_on_wday(\"Fri\", nth = 1)  alma_search(since, to, rrule) #> [1] \"1997-09-05\" \"1997-10-03\" \"1997-11-07\" \"1997-12-05\""},{"path":"/dev/articles/icalendar.html","id":"every-other-month-on-the-first-and-last-sunday-of-the-month-for-10-events","dir":"Articles","previous_headings":"","what":"Every other month on the first and last Sunday of the month for 10 events","title":"iCalendar specification","text":"","code":"rrule <- monthly(\"1997-09-07\") %>%   recur_on_wday(\"Sun\", nth = c(1, -1)) %>%   recur_on_interval(2) %>%   recur_for_count(10)  alma_search(since, to, rrule) #>  [1] \"1997-09-07\" \"1997-09-28\" \"1997-11-02\" \"1997-11-30\" \"1998-01-04\" #>  [6] \"1998-01-25\" \"1998-03-01\" \"1998-03-29\" \"1998-05-03\" \"1998-05-31\""},{"path":"/dev/articles/icalendar.html","id":"monthly-on-the-second-to-last-monday-of-the-month-for-6-months","dir":"Articles","previous_headings":"","what":"Monthly on the second-to-last Monday of the month for 6 months","title":"iCalendar specification","text":"","code":"rrule <- monthly(\"1997-09-22\") %>%   recur_on_wday(\"Mon\", nth = -2) %>%   recur_for_count(6)  alma_search(since, to, rrule) #> [1] \"1997-09-22\" \"1997-10-20\" \"1997-11-17\" \"1997-12-22\" \"1998-01-19\" #> [6] \"1998-02-16\""},{"path":"/dev/articles/icalendar.html","id":"monthly-on-the-third-to-the-last-day-of-the-month-forever","dir":"Articles","previous_headings":"","what":"Monthly on the third-to-the-last day of the month, forever","title":"iCalendar specification","text":"","code":"rrule <- monthly(\"1997-09-28\") %>%   recur_on_mday(-3)  alma_search(since, \"1997-12-01\", rrule) #> [1] \"1997-09-28\" \"1997-10-29\" \"1997-11-28\""},{"path":"/dev/articles/icalendar.html","id":"monthly-on-the-2nd-and-15th-of-the-month-for-10-events","dir":"Articles","previous_headings":"","what":"Monthly on the 2nd and 15th of the month for 10 events","title":"iCalendar specification","text":"","code":"rrule <- monthly(\"1997-09-02\") %>%   recur_on_mday(c(2, 15)) %>%   recur_for_count(10)  alma_search(since, to, rrule) #>  [1] \"1997-09-02\" \"1997-09-15\" \"1997-10-02\" \"1997-10-15\" \"1997-11-02\" #>  [6] \"1997-11-15\" \"1997-12-02\" \"1997-12-15\" \"1998-01-02\" \"1998-01-15\""},{"path":"/dev/articles/icalendar.html","id":"monthly-on-the-first-and-last-day-of-the-month-for-10-events","dir":"Articles","previous_headings":"","what":"Monthly on the first and last day of the month for 10 events","title":"iCalendar specification","text":"","code":"rrule <- monthly(\"1997-09-30\") %>%   recur_on_mday(c(1, -1)) %>%   recur_for_count(10)  alma_search(since, to, rrule) #>  [1] \"1997-09-30\" \"1997-10-01\" \"1997-10-31\" \"1997-11-01\" \"1997-11-30\" #>  [6] \"1997-12-01\" \"1997-12-31\" \"1998-01-01\" \"1998-01-31\" \"1998-02-01\""},{"path":"/dev/articles/icalendar.html","id":"every-18-months-on-the-10th-thru-15th-of-the-month-for-10-events","dir":"Articles","previous_headings":"","what":"Every 18 months on the 10th thru 15th of the month for 10 events","title":"iCalendar specification","text":"","code":"rrule <- monthly(\"1997-09-10\") %>%   recur_on_interval(18) %>%   recur_on_mday(10:15) %>%   recur_for_count(10)  alma_search(\"1997-09-10\", to, rrule) #>  [1] \"1997-09-10\" \"1997-09-11\" \"1997-09-12\" \"1997-09-13\" \"1997-09-14\" #>  [6] \"1997-09-15\" \"1999-03-10\" \"1999-03-11\" \"1999-03-12\" \"1999-03-13\""},{"path":"/dev/articles/icalendar.html","id":"every-tuesday-every-other-month","dir":"Articles","previous_headings":"","what":"Every Tuesday, every other month","title":"iCalendar specification","text":"","code":"rrule <- monthly(since) %>%   recur_on_interval(2) %>%   recur_on_wday(\"Tuesday\")  alma_search(since, \"1997-12-01\", rrule) #> [1] \"1997-09-02\" \"1997-09-09\" \"1997-09-16\" \"1997-09-23\" \"1997-09-30\" #> [6] \"1997-11-04\" \"1997-11-11\" \"1997-11-18\" \"1997-11-25\""},{"path":"/dev/articles/icalendar.html","id":"yearly-in-june-and-july-for-10-events","dir":"Articles","previous_headings":"","what":"Yearly in June and July for 10 events","title":"iCalendar specification","text":"Note day month taken since date, since otherwise specified!","code":"rrule <- yearly(\"1997-06-10\") %>%   recur_on_ymonth(c(\"June\", \"July\")) %>%   recur_for_count(10)  alma_search(\"1997-06-10\", to, rrule) #>  [1] \"1997-06-10\" \"1997-07-10\" \"1998-06-10\" \"1998-07-10\" \"1999-06-10\" #>  [6] \"1999-07-10\" \"2000-06-10\" \"2000-07-10\" \"2001-06-10\" \"2001-07-10\""},{"path":"/dev/articles/icalendar.html","id":"every-other-year-on-january-february-and-march-for-10-events","dir":"Articles","previous_headings":"","what":"Every other year on January, February, and March for 10 events","title":"iCalendar specification","text":"","code":"rrule <- yearly(\"1997-03-10\") %>%   recur_on_ymonth(c(\"Jan\", \"Feb\", \"Mar\")) %>%   recur_on_interval(2) %>%   recur_for_count(10)  alma_search(\"1997-03-10\", to, rrule) #>  [1] \"1997-03-10\" \"1999-01-10\" \"1999-02-10\" \"1999-03-10\" \"2001-01-10\" #>  [6] \"2001-02-10\" \"2001-03-10\" \"2003-01-10\" \"2003-02-10\" \"2003-03-10\""},{"path":"/dev/articles/icalendar.html","id":"every-third-year-on-the-1st-100th-and-200th-day-for-10-events","dir":"Articles","previous_headings":"","what":"Every third year on the 1st, 100th, and 200th day for 10 events","title":"iCalendar specification","text":"","code":"rrule <- yearly(\"1997-01-01\") %>%   recur_on_yday(c(1, 100, 200)) %>%   recur_on_interval(3) %>%   recur_for_count(10)  alma_search(\"1997-01-01\", to, rrule) #>  [1] \"1997-01-01\" \"1997-04-10\" \"1997-07-19\" \"2000-01-01\" \"2000-04-09\" #>  [6] \"2000-07-18\" \"2003-01-01\" \"2003-04-10\" \"2003-07-19\" \"2006-01-01\""},{"path":"/dev/articles/icalendar.html","id":"every-20th-monday-of-the-year-forever","dir":"Articles","previous_headings":"","what":"Every 20th Monday of the year, forever","title":"iCalendar specification","text":"","code":"rrule <- yearly(\"1997-05-19\") %>%   recur_on_wday(\"Monday\", nth = 20)  alma_search(\"1997-05-19\", \"2000-01-01\", rrule) #> [1] \"1997-05-19\" \"1998-05-18\" \"1999-05-17\""},{"path":"/dev/articles/icalendar.html","id":"monday-of-week-number-20-where-the-default-start-of-the-week-is-monday-forever","dir":"Articles","previous_headings":"","what":"Monday of week number 20 (where the default start of the week is Monday), forever","title":"iCalendar specification","text":"Default week start almanac Monday.","code":"rrule <- yearly(\"1997-05-12\") %>%   recur_on_yweek(20) %>%   recur_on_wday(\"Monday\")  alma_search(\"1997-05-12\", \"2000-01-01\", rrule) #> [1] \"1997-05-12\" \"1998-05-11\" \"1999-05-17\""},{"path":"/dev/articles/icalendar.html","id":"every-thursday-in-march-forever","dir":"Articles","previous_headings":"","what":"Every Thursday in March, forever","title":"iCalendar specification","text":"","code":"rrule <- yearly(\"1997-03-13\") %>%   recur_on_wday(\"Thursday\") %>%   recur_on_ymonth(\"March\")  alma_search(\"1997-03-13\", \"2000-01-01\", rrule) #>  [1] \"1997-03-13\" \"1997-03-20\" \"1997-03-27\" \"1998-03-05\" \"1998-03-12\" #>  [6] \"1998-03-19\" \"1998-03-26\" \"1999-03-04\" \"1999-03-11\" \"1999-03-18\" #> [11] \"1999-03-25\""},{"path":"/dev/articles/icalendar.html","id":"every-thursday-but-only-during-june-july-and-august-forever","dir":"Articles","previous_headings":"","what":"Every Thursday, but only during June, July, and August, forever","title":"iCalendar specification","text":"","code":"rrule <- yearly(\"1997-06-05\") %>%   recur_on_wday(\"Thursday\") %>%   recur_on_ymonth(c(\"Jun\", \"July\", \"Aug\"))  alma_search(\"1997-06-05\", \"1999-01-01\", rrule) #>  [1] \"1997-06-05\" \"1997-06-12\" \"1997-06-19\" \"1997-06-26\" \"1997-07-03\" #>  [6] \"1997-07-10\" \"1997-07-17\" \"1997-07-24\" \"1997-07-31\" \"1997-08-07\" #> [11] \"1997-08-14\" \"1997-08-21\" \"1997-08-28\" \"1998-06-04\" \"1998-06-11\" #> [16] \"1998-06-18\" \"1998-06-25\" \"1998-07-02\" \"1998-07-09\" \"1998-07-16\" #> [21] \"1998-07-23\" \"1998-07-30\" \"1998-08-06\" \"1998-08-13\" \"1998-08-20\" #> [26] \"1998-08-27\""},{"path":"/dev/articles/icalendar.html","id":"every-friday-the-13th-forever","dir":"Articles","previous_headings":"","what":"Every Friday the 13th, forever","title":"iCalendar specification","text":"","code":"rrule <- yearly(since) %>%   recur_on_wday(\"Friday\") %>%   recur_on_mday(13)  alma_search(since, \"2001-01-01\", rrule) #> [1] \"1998-02-13\" \"1998-03-13\" \"1998-11-13\" \"1999-08-13\" \"2000-10-13\""},{"path":"/dev/articles/icalendar.html","id":"the-first-saturday-that-follows-the-first-sunday-of-the-month-forever","dir":"Articles","previous_headings":"","what":"The first Saturday that follows the first Sunday of the month, forever","title":"iCalendar specification","text":"","code":"rrule <- yearly(\"1997-09-13\") %>%   recur_on_wday(\"Saturday\") %>%   recur_on_mday(7:13)  alma_search(\"1997-09-13\", \"1998-06-01\", rrule) #> [1] \"1997-09-13\" \"1997-10-11\" \"1997-11-08\" \"1997-12-13\" \"1998-01-10\" #> [6] \"1998-02-07\" \"1998-03-07\" \"1998-04-11\" \"1998-05-09\""},{"path":"/dev/articles/icalendar.html","id":"every-4-years-the-first-tuesday-after-a-monday-in-november-forever-u-s--presidential-election-day","dir":"Articles","previous_headings":"","what":"Every 4 years, the first Tuesday after a Monday in November, forever (U.S. Presidential Election day)","title":"iCalendar specification","text":"","code":"rrule <- yearly(\"1996-11-05\") %>%   recur_on_wday(\"Tuesday\") %>%   recur_on_mday(2:8) %>%   recur_on_interval(4) %>%   recur_on_ymonth(\"November\")  alma_search(\"1996-11-05\", \"2010-12-31\", rrule) #> [1] \"1996-11-05\" \"2000-11-07\" \"2004-11-02\" \"2008-11-04\""},{"path":"/dev/articles/icalendar.html","id":"the-third-instance-into-the-month-of-one-of-tuesday-wednesday-or-thursday-for-the-next-3-months","dir":"Articles","previous_headings":"","what":"The third instance into the month of one of Tuesday, Wednesday, or Thursday, for the next 3 months","title":"iCalendar specification","text":"recur_on_position() incredibly powerful tool, allowing select position within frequency. selects third element monthly set, monthly set contains Tuesday, Wednesday, Thursdays month.","code":"rrule <- monthly(\"1997-09-04\") %>%   recur_on_wday(c(\"Tue\", \"Wed\", \"Thu\")) %>%   recur_on_position(3) %>%   recur_for_count(3)  alma_search(\"1997-09-04\", to, rrule) #> [1] \"1997-09-04\" \"1997-10-07\" \"1997-11-06\""},{"path":"/dev/articles/icalendar.html","id":"the-second-to-last-weekday-of-the-month","dir":"Articles","previous_headings":"","what":"The second-to-last weekday of the month","title":"iCalendar specification","text":"","code":"rrule <- monthly(\"1997-09-29\") %>%   recur_on_wday(1:5) %>%   recur_on_position(-2)  alma_search(\"1997-09-29\", \"1998-12-01\", rrule) #>  [1] \"1997-09-29\" \"1997-10-30\" \"1997-11-27\" \"1997-12-30\" \"1998-01-29\" #>  [6] \"1998-02-26\" \"1998-03-30\" \"1998-04-29\" \"1998-05-28\" \"1998-06-29\" #> [11] \"1998-07-30\" \"1998-08-28\" \"1998-09-29\" \"1998-10-29\" \"1998-11-27\""},{"path":"/dev/articles/icalendar.html","id":"an-example-where-the-days-generated-makes-a-difference-because-of-week_start","dir":"Articles","previous_headings":"","what":"An example where the days generated makes a difference because of week_start","title":"iCalendar specification","text":"Changing week start Sunday.","code":"rrule <- weekly(\"1997-08-05\") %>%   recur_on_interval(2) %>%   recur_for_count(4) %>%   recur_on_wday(c(\"Tue\", \"Sun\")) %>%   recur_with_week_start(\"Monday\")  # Week 1: 1997-08-04 -> 1997-08-10 # Week 2: 1997-08-11 -> 1997-08-17 (skipped) # Week 3: 1997-08-18 -> 1997-08-24  alma_search(\"1997-08-05\", \"1998-12-01\", rrule) #> [1] \"1997-08-05\" \"1997-08-10\" \"1997-08-19\" \"1997-08-24\" rrule <- weekly(\"1997-08-05\") %>%   recur_on_interval(2) %>%   recur_for_count(4) %>%   recur_on_wday(c(\"Tue\", \"Sun\")) %>%   recur_with_week_start(\"Sunday\")  # Week 1: 1997-08-03 -> 1997-08-09 # Week 2: 1997-08-10 -> 1997-08-16 (skipped) # Week 3: 1997-08-17 -> 1997-08-23 # Week 4: 1997-08-24 -> 1997-08-30 (skipped) # Week 5: 1997-08-31 -> 1997-09-06 alma_search(\"1997-08-05\", \"1998-12-01\", rrule) #> [1] \"1997-08-05\" \"1997-08-17\" \"1997-08-19\" \"1997-08-31\""},{"path":"/dev/articles/icalendar.html","id":"an-example-where-an-invalid-date-i-e--february-30-is-ignored","dir":"Articles","previous_headings":"","what":"An example where an invalid date (i.e., February 30) is ignored","title":"iCalendar specification","text":"Invalid dates decrease total count.","code":"rrule <- weekly(\"2007-01-15\") %>%   recur_on_mday(c(15, 30)) %>%   recur_for_count(5)  alma_search(\"2007-01-15\", \"2007-12-31\", rrule) #> [1] \"2007-01-15\" \"2007-01-30\" \"2007-02-15\" \"2007-03-15\" \"2007-03-30\""},{"path":"/dev/articles/quarterly.html","id":"first-day-of-the-quarter","dir":"Articles","previous_headings":"","what":"First day of the quarter","title":"Quarterly rules","text":"one particularly easy, reason bit misleading. Let’s show first: Whenever need “first” event per quarter, good chance event fall first month quarter, case . Whenever guarantee event falls first month quarter, can computed start month, can probably just use monthly() %>% recur_on_interval(3) get quarterly values.","code":"on_first_day_of_quarter <- monthly(since = \"2000-01-01\") %>%   recur_on_interval(3) %>%   recur_on_mday(1)  alma_search(\"2000-01-01\", \"2002-01-01\", on_first_day_of_quarter) #> [1] \"2000-01-01\" \"2000-04-01\" \"2000-07-01\" \"2000-10-01\" \"2001-01-01\" #> [6] \"2001-04-01\" \"2001-07-01\" \"2001-10-01\" \"2002-01-01\""},{"path":"/dev/articles/quarterly.html","id":"altering-the-fiscal-year-start","dir":"Articles","previous_headings":"","what":"Altering the fiscal year start","title":"Quarterly rules","text":"moving complex examples, want show general way change start fiscal year. means rather starting quarter January, start March. Remember since date used anchor date things like recur_on_interval(), chose since date March, recur different fiscal calendar.","code":"on_first_day_of_quarter_march_start <- monthly(since = \"2000-03-01\") %>%   recur_on_interval(3) %>%   recur_on_mday(1)  alma_search(\"2000-01-01\", \"2002-01-01\", on_first_day_of_quarter_march_start) #> [1] \"2000-03-01\" \"2000-06-01\" \"2000-09-01\" \"2000-12-01\" \"2001-03-01\" #> [6] \"2001-06-01\" \"2001-09-01\" \"2001-12-01\""},{"path":"/dev/articles/quarterly.html","id":"n-th-day-of-the-quarter","dir":"Articles","previous_headings":"","what":"N-th day of the quarter","title":"Quarterly rules","text":"general case first example, happens want compute N-th day quarter, either front back? Unlike first example, longer guarantee date first month, count back really need entire set 3 months make quarter count correctly. secret break rule 4 smaller rules, one per quarter, can combine 1 larger quarterly runion. Let’s start concrete example Q1. can get 60th day quarter? breaks follows: Use yearly() frequency rather monthly() one. Recur 3 months make first quarter. Recur days month (isn’t problem month doesn’t day 30 31). gives us access ~90 days quarter (exact number varies per quarter). recur_on_position() can take nth day set. Using yearly() rather monthly() required recur_on_position() work correctly. recur_on_position() takes n-th position set, within frequency. chosen monthly try take 60th position within monthly set, isn’t wanted. rest quarterly rules straightforward . just change ymonth values. make usable, ’ll also wrap parameterized function, go ahead construct combined runion object four pieces. Let’s give whirl. can also select days end quarter, example, last day quarter: general strategy using base rule yearly() %>% recur_on_ymonth(), plus usage recur_on_position() solved quarterly problems can think .","code":"on_60th_day_of_q1 <- yearly() %>%   recur_on_ymonth(1:3) %>%   recur_on_mday(1:31) %>%   recur_on_position(60)  alma_search(\"2000-01-01\", \"2002-01-01\", on_60th_day_of_q1) #> [1] \"2000-02-29\" \"2001-03-01\" make_on_nth_doq <- function(since = \"1970-01-01\", nth = 1L) {   all_days <- 1:31      on_nth_day_of_q1 <- yearly(since = since) %>%     recur_on_ymonth(1:3) %>%     recur_on_mday(all_days) %>%     recur_on_position(nth)      on_nth_day_of_q2 <- yearly(since = since) %>%     recur_on_ymonth(4:6) %>%     recur_on_mday(all_days) %>%     recur_on_position(nth)      on_nth_day_of_q3 <- yearly(since = since) %>%     recur_on_ymonth(7:9) %>%     recur_on_mday(all_days) %>%     recur_on_position(nth)        on_nth_day_of_q4 <- yearly(since = since) %>%     recur_on_ymonth(10:12) %>%     recur_on_mday(all_days) %>%     recur_on_position(nth)      on_nth_doq <- runion() %>%     add_rschedule(on_nth_day_of_q1) %>%     add_rschedule(on_nth_day_of_q2) %>%     add_rschedule(on_nth_day_of_q3) %>%     add_rschedule(on_nth_day_of_q4)      on_nth_doq } on_60th_doq <- make_on_nth_doq(since = \"2000-01-01\", nth = 60)  alma_search(\"2000-01-01\", \"2002-01-01\", on_60th_doq) #> [1] \"2000-02-29\" \"2000-05-30\" \"2000-08-29\" \"2000-11-29\" \"2001-03-01\" #> [6] \"2001-05-30\" \"2001-08-29\" \"2001-11-29\" on_last_doq <- make_on_nth_doq(since = \"2000-01-01\", nth = -1)  alma_search(\"2000-01-01\", \"2002-01-01\", on_last_doq) #> [1] \"2000-03-31\" \"2000-06-30\" \"2000-09-30\" \"2000-12-31\" \"2001-03-31\" #> [6] \"2001-06-30\" \"2001-09-30\" \"2001-12-31\""},{"path":"/dev/articles/quarterly.html","id":"n-th-week-day-of-the-quarter","dir":"Articles","previous_headings":"","what":"N-th week day of the quarter","title":"Quarterly rules","text":"showcase strategy , let’s figure get nth week day quarter. , start Q1 first, time computing 6th Monday Q1. Multiple week days can used . Now generalize:","code":"since <- \"2000-01-01\" wday <- \"Monday\" nth <- 6  on_6th_monday_of_q1 <- yearly(since = since) %>%   recur_on_ymonth(1:3) %>%   recur_on_wday(wday) %>%   recur_on_position(nth)  alma_search(\"2000-01-01\", \"2002-01-01\", on_6th_monday_of_q1) #> [1] \"2000-02-07\" \"2001-02-05\" since <- \"2000-01-01\" wday <- c(\"Monday\", \"Tuesday\") nth <- 19  on_19th_monday_or_tuesday_of_q1 <- yearly(since = since) %>%   recur_on_ymonth(1:3) %>%   recur_on_wday(wday) %>%   recur_on_position(nth)  alma_search(\"2000-01-01\", \"2002-01-01\", on_19th_monday_or_tuesday_of_q1) #> [1] \"2000-03-06\" \"2001-03-05\" make_on_nth_wday_of_the_quarter <- function(since = \"1970-01-01\",                                              wday = \"Monday\",                                              nth = 1L) {   on_nth_wday_of_q1 <- yearly(since = since) %>%     recur_on_ymonth(1:3) %>%     recur_on_wday(wday) %>%     recur_on_position(nth)      on_nth_wday_of_q2 <- yearly(since = since) %>%     recur_on_ymonth(4:6) %>%     recur_on_wday(wday) %>%     recur_on_position(nth)      on_nth_wday_of_q3 <- yearly(since = since) %>%     recur_on_ymonth(7:9) %>%     recur_on_wday(wday) %>%     recur_on_position(nth)        on_nth_wday_of_q4 <- yearly(since = since) %>%     recur_on_ymonth(10:12) %>%     recur_on_wday(wday) %>%     recur_on_position(nth)      on_nth_wday_of_the_quarter <- runion() %>%     add_rschedule(on_nth_wday_of_q1) %>%     add_rschedule(on_nth_wday_of_q2) %>%     add_rschedule(on_nth_wday_of_q3) %>%     add_rschedule(on_nth_wday_of_q4)      on_nth_wday_of_the_quarter } on_last_friday_of_the_quarter <- make_on_nth_wday_of_the_quarter(   since = \"2000-01-01\",    wday = \"Friday\",    nth = -1 )  fridays <- alma_search(\"2000-01-01\", \"2002-01-01\", on_last_friday_of_the_quarter) fridays #> [1] \"2000-03-31\" \"2000-06-30\" \"2000-09-29\" \"2000-12-29\" \"2001-03-30\" #> [6] \"2001-06-29\" \"2001-09-28\" \"2001-12-28\"  wday(fridays, label = TRUE) #> [1] Fri Fri Fri Fri Fri Fri Fri Fri #> Levels: Sun < Mon < Tue < Wed < Thu < Fri < Sat"},{"path":"/dev/articles/quarterly.html","id":"combining-with-other-rules","dir":"Articles","previous_headings":"","what":"Combining with other rules","title":"Quarterly rules","text":"Remember results just rbundles can combined rules need create complex quarterly strategies. example, let’s take “last Friday quarter” runion combine rule “every Wednesday”.","code":"on_wednesdays <- weekly() %>%   recur_on_wday(\"Wednesday\")  on_last_friday_of_quarter_or_wednesdays <- runion() %>%   add_rschedule(on_wednesdays) %>%   add_rschedule(on_last_friday_of_the_quarter)  last_friday_or_wednesdays <- alma_search(   \"2000-01-01\", \"2002-01-01\",    on_last_friday_of_quarter_or_wednesdays )  last_friday_or_wednesdays[1:15] #>  [1] \"2000-01-05\" \"2000-01-12\" \"2000-01-19\" \"2000-01-26\" \"2000-02-02\" #>  [6] \"2000-02-09\" \"2000-02-16\" \"2000-02-23\" \"2000-03-01\" \"2000-03-08\" #> [11] \"2000-03-15\" \"2000-03-22\" \"2000-03-29\" \"2000-03-31\" \"2000-04-05\"  wday(last_friday_or_wednesdays[1:15], label = TRUE) #>  [1] Wed Wed Wed Wed Wed Wed Wed Wed Wed Wed Wed Wed Wed Fri Wed #> Levels: Sun < Mon < Tue < Wed < Thu < Fri < Sat"},{"path":"/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Davis Vaughan. Author, maintainer. Posit Software, PBC. Copyright holder, funder.","code":""},{"path":"/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vaughan D (2023). almanac: Tools Working Recurrence Rules. R package version 0.1.1.9000, https://github.com/DavisVaughan/almanac.","code":"@Manual{,   title = {almanac: Tools for Working with Recurrence Rules},   author = {Davis Vaughan},   year = {2023},   note = {R package version 0.1.1.9000},   url = {https://github.com/DavisVaughan/almanac}, }"},{"path":"/dev/index.html","id":"almanac","dir":"","previous_headings":"","what":"Tools for Working with Recurrence Rules","title":"Tools for Working with Recurrence Rules","text":"almanac provides tools working recurrence rules, fundamental building blocks used identify calendar “events”, weekends holidays.","code":"library(almanac)"},{"path":"/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for Working with Recurrence Rules","text":"Install released version almanac CRAN : Install development version GitHub :","code":"install.packages(\"almanac\") # install.packages(\"pak\") pak::pak(\"DavisVaughan/almanac\")"},{"path":"/dev/index.html","id":"recurrence-rules","dir":"","previous_headings":"","what":"Recurrence Rules","title":"Tools for Working with Recurrence Rules","text":"Constructing recurrence rules looks like : constructing recurrence rule, can used generate dates “event set”. example, can search Thanksgivings 2000-2006. Determine particular date part event set alma_in(). can also shift existing sequence dates, “stepping ” dates part event set. additional “stepper” object can create intuitive stepping. Combine %s+% perform step done alma_step(). Create stepper function stepper(), use supplying number days step.","code":"# Thanksgiving = \"The fourth Thursday in November\" on_thanksgiving <- yearly() %>%    recur_on_ymonth(\"November\") %>%   recur_on_wday(\"Thursday\", nth = 4)  on_thanksgiving #> <rrule[yearly / 1900-01-01 / 2100-01-01]> #> - ymonth: Nov #> - wday: Thu[4] alma_search(\"2000-01-01\", \"2006-12-31\", on_thanksgiving) #> [1] \"2000-11-23\" \"2001-11-22\" \"2002-11-28\" \"2003-11-27\" \"2004-11-25\" #> [6] \"2005-11-24\" \"2006-11-23\" # Is this a Thanksgiving? alma_in(c(\"2000-01-01\", \"2000-11-23\"), on_thanksgiving) #> [1] FALSE  TRUE wednesday_before_thanksgiving <- as.Date(\"2000-11-22\")  # Thanksgiving was on 2000-11-23. # This steps over Thanksgiving to 2000-11-24. # Then steps 1 more day to 2000-11-25. alma_step(wednesday_before_thanksgiving, n = 2, on_thanksgiving) #> [1] \"2000-11-25\" step_over_thanksgiving <- stepper(on_thanksgiving) wednesday_before_thanksgiving %s+% step_over_thanksgiving(2) #> [1] \"2000-11-25\""},{"path":"/dev/index.html","id":"recurrence-bundles","dir":"","previous_headings":"","what":"Recurrence Bundles","title":"Tools for Working with Recurrence Rules","text":"example just scratches surface almanac can . Practically speaking, ’ll probably multiple holidays events ’d like combine one big recurrence object. known recurrence bundle. example creates recurrence rules weekends Christmas, bundles together along Thanksgiving rule way get union underlying event sets. can create stepper steps events bundle. two holidays ones company celebrated, stepper viewed way step forward “business day”. example, Christmas Monday 2006. wanted step 1 business day forward Friday Christmas, ’d probably like step weekend Christmas Monday Tuesday. bundle lets exactly !","code":"on_weekends <- weekly() %>%   recur_on_weekends()  on_christmas <- yearly() %>%   recur_on_mday(25) %>%   recur_on_ymonth(\"Dec\")  bundle <- runion() %>%   add_rschedule(on_weekends) %>%   add_rschedule(on_christmas) %>%   add_rschedule(on_thanksgiving)  bundle #> <runion[3 rschedules / 0 rdates / 0 exdates]> business_day <- stepper(bundle)  # Christmas was on a Monday in 2006. # This is the Friday before Christmas friday <- as.Date(\"2006-12-22\")  # Step forward 1 business day, going over the weekend and Christmas friday %s+% business_day(1) #> [1] \"2006-12-26\""},{"path":"/dev/index.html","id":"learning-more","dir":"","previous_headings":"","what":"Learning More","title":"Tools for Working with Recurrence Rules","text":"View vignettes website learn use almanac. vignette(\"almanac\") vignette(\"adjust--shift\") vignette(\"quarterly\") vignette(\"icalendar\")","code":""},{"path":"/dev/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Tools for Working with Recurrence Rules","text":"almanac developed composite ideas multiple different libraries. First , directly embeds amazing JavaScript library rrule core event set calculations. , uses equally awesome R package, V8, Jeroen Ooms. date shifting / adjusting functions modeled similar functions QuantLib. fast binary search based implementations alma_next() alma_step() inspired Pandas implementation Numpy’s busday_offset(). author gs, James Laird-Smith, great collaborator bounced ideas . gs attempts solve similar problem, slightly different implementation.","code":""},{"path":"/dev/reference/adjustments.html","id":null,"dir":"Reference","previous_headings":"","what":"Date adjustments — adjustments","title":"Date adjustments — adjustments","text":"family adj_*() functions encode business logic common date adjustments. x falls event date, adjusted according function's adjustment rule. Otherwise left untouched. adj_following() Choose first non-event date x. adj_preceding() Choose first non-event date x. adj_modified_following() Choose first non-event date x, unless falls different month, case first non-event date x chosen instead. adj_modified_preceding() Choose first non-event date x, unless falls different month, case first non-event date x chosen instead. adj_nearest() Choose nearest non-event date x. closest preceding following non-event dates equally far away, following non-event date chosen. adj_none() Performs adjustment returns x unchanged.","code":""},{"path":"/dev/reference/adjustments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date adjustments — adjustments","text":"","code":"adj_following(x, rschedule)  adj_preceding(x, rschedule)  adj_modified_following(x, rschedule)  adj_modified_preceding(x, rschedule)  adj_nearest(x, rschedule)  adj_none(x, rschedule)"},{"path":"/dev/reference/adjustments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date adjustments — adjustments","text":"x [Date] vector dates. rschedule [rschedule] rschedule, rrule rbundle.","code":""},{"path":"/dev/reference/adjustments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date adjustments — adjustments","text":"adjusted vector Dates.","code":""},{"path":"/dev/reference/adjustments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date adjustments — adjustments","text":"","code":"# A Saturday x <- as.Date(\"1970-01-03\")  on_weekends <- weekly() %>% recur_on_weekends()  # Adjust forward to Monday adj_following(x, on_weekends) #> [1] \"1970-01-05\"  # Adjust backwards to Friday adj_preceding(x, on_weekends) #> [1] \"1970-01-02\"  # Adjust to nearest non-event date adj_nearest(x, on_weekends) #> [1] \"1970-01-02\" adj_nearest(x + 1, on_weekends) #> [1] \"1970-01-05\"  # Sundays, one of which is at the end of the month sundays <- as.Date(c(\"2020-05-24\", \"2020-05-31\"))  # Adjust forward, unless that takes us into a new month, in which case we # adjust backwards. adj_modified_following(sundays, on_weekends) #> [1] \"2020-05-25\" \"2020-05-29\"  # Saturdays, one of which is at the beginning of the month saturdays <- as.Date(c(\"2020-08-01\", \"2020-08-08\"))  # Adjust backwards, unless that takes us into a new month, in which # case we adjust forwards adj_modified_preceding(saturdays, on_weekends) #> [1] \"2020-08-03\" \"2020-08-07\""},{"path":"/dev/reference/alma_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all events — alma_events","title":"Get all events — alma_events","text":"alma_events() retrieves events rschedule's event set.","code":""},{"path":"/dev/reference/alma_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all events — alma_events","text":"","code":"alma_events(rschedule)"},{"path":"/dev/reference/alma_events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all events — alma_events","text":"rschedule [rschedule] rschedule, rrule rbundle.","code":""},{"path":"/dev/reference/alma_events.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all events — alma_events","text":"Date vector events.","code":""},{"path":"/dev/reference/alma_events.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all events — alma_events","text":"","code":"rrule <- daily(since = \"1970-01-01\", until = \"1970-01-05\")  alma_events(rrule) #> [1] \"1970-01-01\" \"1970-01-02\" \"1970-01-03\" \"1970-01-04\" \"1970-01-05\"  rrule_weekly <- weekly(since = \"1970-01-01\") %>%   recur_for_count(5)  rb <- runion() %>%   add_rschedule(rrule) %>%   add_rschedule(rrule_weekly)  alma_events(rb) #> [1] \"1970-01-01\" \"1970-01-02\" \"1970-01-03\" \"1970-01-04\" \"1970-01-05\" #> [6] \"1970-01-08\" \"1970-01-15\" \"1970-01-22\" \"1970-01-29\""},{"path":"/dev/reference/alma_in.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if dates are in an event set — alma_in","title":"Check if dates are in an event set — alma_in","text":"alma_in() checks x event set dates defined rschedule.","code":""},{"path":"/dev/reference/alma_in.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if dates are in an event set — alma_in","text":"","code":"alma_in(x, rschedule)"},{"path":"/dev/reference/alma_in.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if dates are in an event set — alma_in","text":"x [Date] vector dates. rschedule [rschedule] rschedule, rrule rbundle.","code":""},{"path":"/dev/reference/alma_in.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if dates are in an event set — alma_in","text":"logical vector size x.","code":""},{"path":"/dev/reference/alma_in.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if dates are in an event set — alma_in","text":"","code":"rrule <- weekly() %>%   recur_on_wday(\"Thursday\")  # A Thursday and Friday x <- as.Date(\"1970-01-01\") + 0:1  alma_in(x, rrule) #> [1]  TRUE FALSE  # Every month, on the 2nd day of the month rrule2 <- monthly() %>%   recur_on_mday(2)  # Make a larger rbundle made of multiple rules rb <- runion() %>%  add_rschedule(rrule) %>%  add_rschedule(rrule2)  alma_in(x, rb) #> [1] TRUE TRUE"},{"path":"/dev/reference/alma_next.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the next or previous event — alma_next","title":"Generate the next or previous event — alma_next","text":"alma_next() generates next event x. alma_previous() generates previous event x.","code":""},{"path":"/dev/reference/alma_next.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the next or previous event — alma_next","text":"","code":"alma_next(x, rschedule, inclusive = FALSE)  alma_previous(x, rschedule, inclusive = FALSE)"},{"path":"/dev/reference/alma_next.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the next or previous event — alma_next","text":"x [Date] vector dates. rschedule [rschedule] rschedule, rrule rbundle. inclusive [logical(1)] x event, considered next previous event?","code":""},{"path":"/dev/reference/alma_next.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the next or previous event — alma_next","text":"Date vector size x.","code":""},{"path":"/dev/reference/alma_next.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the next or previous event — alma_next","text":"","code":"on_12th <- monthly() %>% recur_on_mday(12) on_monday <- weekly() %>% recur_on_wday(\"Monday\")  # On the 12th of the month, or on Mondays rb <- runion() %>%   add_rschedule(on_12th) %>%   add_rschedule(on_monday)  alma_next(c(\"2019-01-01\", \"2019-01-11\"), rb) #> [1] \"2019-01-07\" \"2019-01-12\" alma_previous(c(\"2019-01-01\", \"2019-01-11\"), rb) #> [1] \"2018-12-31\" \"2019-01-07\""},{"path":"/dev/reference/alma_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for events — alma_search","title":"Search for events — alma_search","text":"alma_search() retrieves events .","code":""},{"path":"/dev/reference/alma_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for events — alma_search","text":"","code":"alma_search(from, to, rschedule, inclusive = TRUE)"},{"path":"/dev/reference/alma_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for events — alma_search","text":", [Date(1)] Dates defining range look events. rschedule [rschedule] rschedule, rrule rbundle. inclusive [logical(1)] events, included?","code":""},{"path":"/dev/reference/alma_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for events — alma_search","text":"Date vector events .","code":""},{"path":"/dev/reference/alma_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for events — alma_search","text":"","code":"on_12th <- monthly() %>% recur_on_mday(12) on_monday <- weekly() %>% recur_on_wday(\"Monday\")  # On the 12th of the month, or on Mondays rb <- runion() %>%   add_rschedule(on_12th) %>%   add_rschedule(on_monday)  alma_search(\"2019-01-01\", \"2019-01-31\", rb) #> [1] \"2019-01-07\" \"2019-01-12\" \"2019-01-14\" \"2019-01-21\" \"2019-01-28\""},{"path":"/dev/reference/alma_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate date sequences — alma_seq","title":"Generate date sequences — alma_seq","text":"alma_seq() generates sequence dates , skipping events defined rschedule.","code":""},{"path":"/dev/reference/alma_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate date sequences — alma_seq","text":"","code":"alma_seq(from, to, rschedule, inclusive = TRUE)"},{"path":"/dev/reference/alma_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate date sequences — alma_seq","text":", [Date(1)] Dates defining range look events. rschedule [rschedule] rschedule, rrule rbundle. inclusive [logical(1)] events rschedule, removed sequence?","code":""},{"path":"/dev/reference/alma_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate date sequences — alma_seq","text":"vector dates range [, ], events rschedule removed.","code":""},{"path":"/dev/reference/alma_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate date sequences — alma_seq","text":"","code":"on_weekends <- weekly() %>% recur_on_weekends()  # Generate a sequence of all non-weekend dates in Jan-2000 alma_seq(\"2000-01-01\", \"2000-01-31\", on_weekends) #>  [1] \"2000-01-03\" \"2000-01-04\" \"2000-01-05\" \"2000-01-06\" \"2000-01-07\" #>  [6] \"2000-01-10\" \"2000-01-11\" \"2000-01-12\" \"2000-01-13\" \"2000-01-14\" #> [11] \"2000-01-17\" \"2000-01-18\" \"2000-01-19\" \"2000-01-20\" \"2000-01-21\" #> [16] \"2000-01-24\" \"2000-01-25\" \"2000-01-26\" \"2000-01-27\" \"2000-01-28\" #> [21] \"2000-01-31\""},{"path":"/dev/reference/alma_step.html","id":null,"dir":"Reference","previous_headings":"","what":"Step relative to an rschedule — alma_step","title":"Step relative to an rschedule — alma_step","text":"alma_step() useful shifting dates \"n business days\". alma_step() steps sequence dates 1 day time, n days. step, adjustment applied shift next non-event date. n positive, adj_following() called. n negative, adj_preceding() called. n zero, arbitrarily decided call adj_following() roll next available non-event date.","code":""},{"path":"/dev/reference/alma_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Step relative to an rschedule — alma_step","text":"","code":"alma_step(x, n, rschedule)"},{"path":"/dev/reference/alma_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Step relative to an rschedule — alma_step","text":"x [Date] vector dates. n [integer] number days step. Can negative step backwards. rschedule [rschedule] rschedule, rrule rbundle.","code":""},{"path":"/dev/reference/alma_step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Step relative to an rschedule — alma_step","text":"Date vector size x shifted n steps.","code":""},{"path":"/dev/reference/alma_step.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Step relative to an rschedule — alma_step","text":"Imagine Friday want shift forward 2 days using rrule marks weekends events. alma_step() works like : Step forward 1 day Saturday. Apply adjustment adj_following(), rolls forward Monday. Step forward 1 day Tuesday. Apply adjustment adj_following(), adjustment required. lends naturally business logic. Two business days Friday Tuesday.","code":""},{"path":"/dev/reference/alma_step.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Step relative to an rschedule — alma_step","text":"","code":"# Make a rrule for weekends on_weekends <- weekly() %>%   recur_on_weekends()  # \"Step forward by 2 business days\" # 2019-09-13 is a Friday. # Here we: # - Step 1 day to Saturday # - Adjust to Monday # - Step 1 day to Tuesday alma_step(\"2019-09-13\", 2, on_weekends) #> [1] \"2019-09-17\"  # If Monday, 2019-09-16, was a recurring holiday, we could create # a custom runion and step over that too. on_09_16 <- yearly() %>%   recur_on_ymonth(9) %>%   recur_on_mday(16)  rb <- runion() %>%   add_rschedule(on_09_16) %>%   add_rschedule(on_weekends)  alma_step(\"2019-09-13\", 2, rb) #> [1] \"2019-09-18\""},{"path":"/dev/reference/almanac-package.html","id":null,"dir":"Reference","previous_headings":"","what":"almanac: Tools for Working with Recurrence Rules — almanac-package","title":"almanac: Tools for Working with Recurrence Rules — almanac-package","text":"Provides tools defining recurrence rules recurrence bundles. Recurrence rules programmatic way define recurring event, like first Monday December. Multiple recurrence rules can combined larger recurrence bundles. Together, provide system adjusting generating sequences dates simultaneously skipping dates recurrence bundle's event set.","code":""},{"path":[]},{"path":"/dev/reference/almanac-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"almanac: Tools for Working with Recurrence Rules — almanac-package","text":"Maintainer: Davis Vaughan davis@posit.co contributors: Posit Software, PBC [copyright holder, funder]","code":""},{"path":"/dev/reference/almanac-vctrs-compat.html","id":null,"dir":"Reference","previous_headings":"","what":"vctrs compatibility functions — almanac-vctrs-compat","title":"vctrs compatibility functions — almanac-vctrs-compat","text":"functions extensions allow stepper objects work vctrs.","code":""},{"path":"/dev/reference/almanac-vctrs-compat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vctrs compatibility functions — almanac-vctrs-compat","text":"","code":"# S3 method for almanac_stepper vec_arith(op, x, y, ...)  # S3 method for almanac_stepper.almanac_stepper vec_ptype2(x, y, ..., x_arg = \"\", y_arg = \"\")  # S3 method for almanac_stepper.almanac_stepper vec_cast(x, to, ..., x_arg = \"\", to_arg = \"\")"},{"path":"/dev/reference/almanac-vctrs-compat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vctrs compatibility functions — almanac-vctrs-compat","text":"op arithmetic operator string. x, y, Objects. ... Used pass along error message information. x_arg, y_arg, to_arg Used pass along error message information.","code":""},{"path":"/dev/reference/almanac-vctrs-compat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vctrs compatibility functions — almanac-vctrs-compat","text":"See corresponding vctrs function exact return value.","code":""},{"path":"/dev/reference/almanac-vctrs-compat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vctrs compatibility functions — almanac-vctrs-compat","text":"","code":"library(vctrs) vec_arith(\"+\", as.Date(\"2019-01-04\"), workdays(1)) #> [1] \"2019-01-07\""},{"path":"/dev/reference/new-rbundle-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for a set-based recurrence bundle — new-rbundle-set","title":"Constructor for a set-based recurrence bundle — new-rbundle-set","text":"constructors developer focused tools required normal usage almanac. construct new rbundle subclasses directly list existing rschedules. new_runion() creates runion. new_rintersect() creates rintersect. new_rsetdiff() creates rsetdiff.","code":""},{"path":"/dev/reference/new-rbundle-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for a set-based recurrence bundle — new-rbundle-set","text":"","code":"new_rintersect(   rschedules = list(),   rdates = new_date(),   exdates = new_date(),   ...,   class = character() )  new_rsetdiff(   rschedules = list(),   rdates = new_date(),   exdates = new_date(),   ...,   class = character() )  new_runion(   rschedules = list(),   rdates = new_date(),   exdates = new_date(),   ...,   class = character() )"},{"path":"/dev/reference/new-rbundle-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for a set-based recurrence bundle — new-rbundle-set","text":"rschedules [list] list rschedules. rdates [Date] vector dates forcibly include event set. exdates [Date] vector dates forcibly exclude event set. ... [named dots] Additional named elements added rbundle object. class [character] optional subclass.","code":""},{"path":"/dev/reference/new-rbundle-set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for a set-based recurrence bundle — new-rbundle-set","text":"new rbundle subclass.","code":""},{"path":"/dev/reference/new-rbundle-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor for a set-based recurrence bundle — new-rbundle-set","text":"","code":"new_runion() #> <runion[0 rschedules / 0 rdates / 0 exdates]>  x <- daily() y <- weekly()  rschedules <- list(x, y)  new_runion(rschedules) #> <runion[2 rschedules / 0 rdates / 0 exdates]>"},{"path":"/dev/reference/new_rbundle.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for an rbundle — new_rbundle","title":"Constructor for an rbundle — new_rbundle","text":"new_rbundle() developer focused tool required normal usage almanac. constructs new rbundle directly list existing rschedules. rbundle_restore() generic function rbundle subclasses can provide method . dispatches . sole purpose restore classes fields subclass calling following functions: add_rdates() add_exdates() add_rschedule()","code":""},{"path":"/dev/reference/new_rbundle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for an rbundle — new_rbundle","text":"","code":"new_rbundle(   rschedules = list(),   rdates = new_date(),   exdates = new_date(),   ...,   class = character() )  rbundle_restore(x, to)"},{"path":"/dev/reference/new_rbundle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for an rbundle — new_rbundle","text":"rschedules [list] list rschedules. rdates [Date] vector dates forcibly include event set. exdates [Date] vector dates forcibly exclude event set. ... [named dots] Additional named elements added rbundle object. class [character] optional subclass. x [rbundle] updated rbundle needs restored type . [rbundle subclass] rbundle subclass restoring .","code":""},{"path":"/dev/reference/new_rbundle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for an rbundle — new_rbundle","text":"new_rbundle() returns new rbundle. rbundle_restore() return rbundle subclass type .","code":""},{"path":"/dev/reference/new_rbundle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructor for an rbundle — new_rbundle","text":"rbundle abstract class rintersect, runion, rsetdiff inherit . sole purpose rbundle subclass implement rbundle_restore() method defines recover original rbundle subclass adding new rschedule, rdate, exdate. Additionally, rbundles also rschedules, rschedule_events() method must implemented.","code":""},{"path":"/dev/reference/new_rbundle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor for an rbundle — new_rbundle","text":"","code":"new_rbundle() #> $rschedules #> list() #>  #> $rdates #> Date of length 0 #>  #> $exdates #> Date of length 0 #>  #> attr(,\"class\") #> [1] \"rbundle\"   \"rschedule\"  x <- daily() y <- weekly()  rschedules <- list(x, y)  new_rbundle(rschedules) #> $rschedules #> $rschedules[[1]] #> <rrule[daily / 1900-01-01 / 2100-01-01]> #>  #> $rschedules[[2]] #> <rrule[weekly / 1900-01-01 / 2100-01-01]> #>  #>  #> $rdates #> Date of length 0 #>  #> $exdates #> Date of length 0 #>  #> attr(,\"class\") #> [1] \"rbundle\"   \"rschedule\""},{"path":"/dev/reference/new_rschedule.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new rschedule — new_rschedule","title":"Create a new rschedule — new_rschedule","text":"new_rschedule() developer focused tool required normal usage almanac. exported allow packages construct new rschedule objects work almanac functions prefixed alma_*(), like alma_in(). rschedule_events() generic function rschedule subclasses must provide method . rschedule_events() return Date vector containing complete ordered set events event set rschedule.","code":""},{"path":"/dev/reference/new_rschedule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new rschedule — new_rschedule","text":"","code":"new_rschedule(..., class)  rschedule_events(x)"},{"path":"/dev/reference/new_rschedule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new rschedule — new_rschedule","text":"... [named fields] Named data fields. class [character] required subclass. x [rschedule subclass] object subclasses rschedule.","code":""},{"path":"/dev/reference/new_rschedule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new rschedule — new_rschedule","text":"new_rschedule(), new rschedule subclass. rschedule_events(), Date vector events.","code":""},{"path":"/dev/reference/new_rschedule.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a new rschedule — new_rschedule","text":"rschedule abstract class rrule rbundle inherit . sole functionality rschedule classes provide method rschedule_events().","code":""},{"path":"/dev/reference/new_rschedule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new rschedule — new_rschedule","text":"","code":"events <- as.Date(\"1970-01-01\")  static <- new_rschedule(   events = events,   class = \"static_rschedule\" )  # You have to register an `rschedule_events()` method first! try(alma_events(static)) #> Error in glubort(\"rschedule subclasses must provide their own `rschedule_events()` method.\") :  #>   rschedule subclasses must provide their own `rschedule_events()` method."},{"path":"/dev/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/dev/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/dev/reference/radjusted.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an adjusted rschedule — radjusted","title":"Create an adjusted rschedule — radjusted","text":"radjusted() creates new adjusted rschedule top existing one. new rschedule contains event dates existing rschedule, except intersect dates event set rschedule, adjust_on. cases, adjustment applied problematic dates shift valid event dates. useful creating corporate holiday rschedules. example, Christmas always falls December 25th, falls Saturday, company might observe Christmas previous Friday. falls Sunday, might observe following Monday. case, construct rschedule recurring event December 25th, second rschedule weekends. Christmas falls weekend, apply adjustment adj_nearest() get observance date.","code":""},{"path":"/dev/reference/radjusted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an adjusted rschedule — radjusted","text":"","code":"radjusted(rschedule, adjust_on, adjustment)"},{"path":"/dev/reference/radjusted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an adjusted rschedule — radjusted","text":"rschedule [rschedule] rschedule, rrule rbundle. adjust_on [rschedule] rschedule determines adjustment applied. adjustment [function] adjustment function apply problematic dates. Typically one pre-existing adjustment functions, like adj_nearest(). custom adjustment function must two arguments x rschedule. x complete vector dates possibly need adjustment. rschedule rschedule event set determines adjustment needs applied. function adjust x required return adjusted Date vector.","code":""},{"path":"/dev/reference/radjusted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an adjusted rschedule — radjusted","text":"adjusted rschedule.","code":""},{"path":"/dev/reference/radjusted.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an adjusted rschedule — radjusted","text":"","code":"since <- \"2000-01-01\" until <- \"2010-01-01\"  on_christmas <- yearly(since = since, until = until) %>%   recur_on_ymonth(\"Dec\") %>%   recur_on_mday(25)  # All Christmas dates, with no adjustments alma_events(on_christmas) #>  [1] \"2000-12-25\" \"2001-12-25\" \"2002-12-25\" \"2003-12-25\" \"2004-12-25\" #>  [6] \"2005-12-25\" \"2006-12-25\" \"2007-12-25\" \"2008-12-25\" \"2009-12-25\"  on_weekends <- weekly(since = since, until = until) %>%   recur_on_weekends()  # Now all Christmas dates that fell on a weekend are # adjusted either forwards or backwards, depending on which # non-event date was closer on_adj_christmas <- radjusted(on_christmas, on_weekends, adj_nearest)  alma_events(on_adj_christmas) #>  [1] \"2000-12-25\" \"2001-12-25\" \"2002-12-25\" \"2003-12-25\" \"2004-12-24\" #>  [6] \"2005-12-26\" \"2006-12-25\" \"2007-12-25\" \"2008-12-25\" \"2009-12-25\""},{"path":"/dev/reference/rbundle-add.html","id":null,"dir":"Reference","previous_headings":"","what":"Add to an rbundle — rbundle-add","title":"Add to an rbundle — rbundle-add","text":"add_rschedule() adds rschedule rbundle. can another rrule another rbundle. add_rdates() adds rdates rbundle. rdates singular special cased dates forcibly included event set. add_exdates() adds exdates rbundle. exdates singular special cased dates forcibly excluded event set.","code":""},{"path":"/dev/reference/rbundle-add.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add to an rbundle — rbundle-add","text":"","code":"add_rschedule(x, rschedule)  add_rdates(x, rdates)  add_exdates(x, exdates)"},{"path":"/dev/reference/rbundle-add.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add to an rbundle — rbundle-add","text":"x [rbundle] rbundle add . rschedule [rschedule] rschedule, rrule rbundle. rdates [Date] Dates forcibly include rbundle. exdates [Date] Dates forcibly exclude rbundle.","code":""},{"path":"/dev/reference/rbundle-add.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add to an rbundle — rbundle-add","text":"updated rbundle.","code":""},{"path":"/dev/reference/rbundle-add.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add to an rbundle — rbundle-add","text":"terms priority: exdate never included. rdate always included also exdate. event generated rschedule always included also exdate.","code":""},{"path":"/dev/reference/rbundle-add.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add to an rbundle — rbundle-add","text":"","code":"on_thanksgiving <- yearly() %>%   recur_on_wday(\"Thurs\", 4) %>%   recur_on_ymonth(\"Nov\")  on_christmas <- yearly() %>%   recur_on_mday(25) %>%   recur_on_ymonth(\"Dec\")  on_labor_day <- monthly() %>%   recur_on_ymonth(\"Sep\") %>%   recur_on_wday(\"Mon\", 1)  rb <- runion() %>%   add_rschedule(on_thanksgiving) %>%   add_rschedule(on_christmas) %>%   add_rschedule(on_labor_day)  # Thanksgiving, Christmas, or Labor Day alma_search(\"2019-01-01\", \"2021-01-01\", rb) #> [1] \"2019-09-02\" \"2019-11-28\" \"2019-12-25\" \"2020-09-07\" \"2020-11-26\" #> [6] \"2020-12-25\"  # Except Labor Day in 2019 rb2 <- add_exdates(rb, \"2019-09-02\")  alma_search(\"2019-01-01\", \"2021-01-01\", rb2) #> [1] \"2019-11-28\" \"2019-12-25\" \"2020-09-07\" \"2020-11-26\" \"2020-12-25\""},{"path":"/dev/reference/rbundle-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new set-based recurrence bundle — rbundle-set","title":"Create a new set-based recurrence bundle — rbundle-set","text":"Often, single rrule sufficient. However, complex recurrence objects can constructed combining multiple rschedules recurrence bundle. three types recurrence bundles provided almanac, construct event sets performing set operation underlying event sets rschedules bundle. runion() takes union. rintersect() takes intersection. rsetdiff() takes set difference. created recurrence bundle, can: Add recurrence rules recurrence bundles add_rschedule(). Forcibly include dates event set add_rdates(). Forcibly exclude dates event set add_exdates().","code":""},{"path":"/dev/reference/rbundle-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new set-based recurrence bundle — rbundle-set","text":"","code":"rintersect()  rsetdiff()  runion()"},{"path":"/dev/reference/rbundle-set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new set-based recurrence bundle — rbundle-set","text":"empty rbundle.","code":""},{"path":"/dev/reference/rbundle-set.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a new set-based recurrence bundle — rbundle-set","text":"rsetdiff(), event set created \"left right\" depends order rschedules added bundle.","code":""},{"path":[]},{"path":"/dev/reference/rbundle-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new set-based recurrence bundle — rbundle-set","text":"","code":"since <- \"2019-04-01\" until <- \"2019-05-31\"  on_weekends <- weekly(since = since, until = until) %>%   recur_on_weekends()  on_25th <- monthly(since = since, until = until) %>%   recur_on_mday(25)  # On weekends OR the 25th of the month ru <- runion() %>%   add_rschedule(on_weekends) %>%   add_rschedule(on_25th)  alma_events(ru) #>  [1] \"2019-04-06\" \"2019-04-07\" \"2019-04-13\" \"2019-04-14\" \"2019-04-20\" #>  [6] \"2019-04-21\" \"2019-04-25\" \"2019-04-27\" \"2019-04-28\" \"2019-05-04\" #> [11] \"2019-05-05\" \"2019-05-11\" \"2019-05-12\" \"2019-05-18\" \"2019-05-19\" #> [16] \"2019-05-25\" \"2019-05-26\"  # On weekends AND the 25th of the month ri <- rintersect() %>%   add_rschedule(on_weekends) %>%   add_rschedule(on_25th)  alma_events(ri) #> [1] \"2019-05-25\"  # On weekends AND NOT the 25th of the month rsd1 <- rsetdiff() %>%   add_rschedule(on_weekends) %>%   add_rschedule(on_25th)  alma_events(rsd1) #>  [1] \"2019-04-06\" \"2019-04-07\" \"2019-04-13\" \"2019-04-14\" \"2019-04-20\" #>  [6] \"2019-04-21\" \"2019-04-27\" \"2019-04-28\" \"2019-05-04\" \"2019-05-05\" #> [11] \"2019-05-11\" \"2019-05-12\" \"2019-05-18\" \"2019-05-19\" \"2019-05-26\"  # On the 25th of the month AND NOT the weekend rsd2 <- rsetdiff() %>%   add_rschedule(on_25th) %>%   add_rschedule(on_weekends)  alma_events(rsd2) #> [1] \"2019-04-25\""},{"path":"/dev/reference/recur_for_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Control the number of times to recur — recur_for_count","title":"Control the number of times to recur — recur_for_count","text":"recur_for_count() controls total number events recurrence set. Using recur_for_count() override date rule.","code":""},{"path":"/dev/reference/recur_for_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control the number of times to recur — recur_for_count","text":"","code":"recur_for_count(x, n)"},{"path":"/dev/reference/recur_for_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control the number of times to recur — recur_for_count","text":"x [rrule] recurrence rule. n [positive integer(1)] number times recur .","code":""},{"path":"/dev/reference/recur_for_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control the number of times to recur — recur_for_count","text":"updated rrule.","code":""},{"path":"/dev/reference/recur_for_count.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Control the number of times to recur — recur_for_count","text":"Remember number times occurrence occurred counted since date! Adjust necessary get desired results.","code":""},{"path":"/dev/reference/recur_for_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control the number of times to recur — recur_for_count","text":"","code":"# Using the default `since` date daily_since_epoch_for_5 <- daily() %>% recur_for_count(5)  alma_search(\"1969-12-31\", \"1970-01-25\", daily_since_epoch_for_5) #> Date of length 0  # Changing the `since` date daily_since_2019_for_5 <- daily(since = \"2019-01-01\") %>% recur_for_count(5)  alma_search(\"2018-12-31\", \"2019-01-25\", daily_since_2019_for_5) #> [1] \"2019-01-01\" \"2019-01-02\" \"2019-01-03\" \"2019-01-04\" \"2019-01-05\"  # In the case of \"impossible\" dates, such as 2019-02-31 and 2019-04-31 in the # example below, they are not added to the total count. Only true event # dates are counted. on_31_for_5 <- monthly(since = \"2019-01-01\") %>%   recur_on_mday(31) %>%   recur_for_count(5)  alma_search(\"2019-01-01\", \"2020-01-01\", on_31_for_5) #> [1] \"2019-01-31\" \"2019-03-31\" \"2019-05-31\" \"2019-07-31\" \"2019-08-31\""},{"path":"/dev/reference/recur_on_easter.html","id":null,"dir":"Reference","previous_headings":"","what":"Recur on easter — recur_on_easter","title":"Recur on easter — recur_on_easter","text":"recur_on_easter() special helper recur Easter. Easter particularly difficult construct recurrence rule . Using offset, can also used generate recurrence rule Easter Monday Good Friday.","code":""},{"path":"/dev/reference/recur_on_easter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recur on easter — recur_on_easter","text":"","code":"recur_on_easter(x, offset = 0L)"},{"path":"/dev/reference/recur_on_easter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recur on easter — recur_on_easter","text":"x [rrule] recurrence rule. offset [integer(1)] offset terms number days either side Easter recur . offset must still fall within year, otherwise date silently ignored.","code":""},{"path":"/dev/reference/recur_on_easter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recur on easter — recur_on_easter","text":"updated rrule.","code":""},{"path":"/dev/reference/recur_on_easter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recur on easter — recur_on_easter","text":"","code":"on_easter <- yearly() %>% recur_on_easter() on_easter_monday <- yearly() %>% recur_on_easter(-1)  alma_search(\"1999-01-01\", \"2001-01-01\", on_easter) #> [1] \"1999-04-04\" \"2000-04-23\"  rb <- runion() %>%   add_rschedule(on_easter) %>%   add_rschedule(on_easter_monday)  alma_search(\"1999-01-01\", \"2001-01-01\", rb) #> [1] \"1999-04-03\" \"1999-04-04\" \"2000-04-22\" \"2000-04-23\"   # Note that `offset` must land within the same year, otherwise the date # is ignored on_easter_back_93_days <- yearly() %>% recur_on_easter(-93) on_easter_back_94_days <- yearly() %>% recur_on_easter(-94)  alma_search(\"1999-01-01\", \"2001-01-01\", on_easter_back_93_days) #> [1] \"1999-01-01\" \"2000-01-21\" alma_search(\"1999-01-01\", \"2001-01-01\", on_easter_back_94_days) #> [1] \"2000-01-20\""},{"path":"/dev/reference/recur_on_interval.html","id":null,"dir":"Reference","previous_headings":"","what":"Recur on an interval — recur_on_interval","title":"Recur on an interval — recur_on_interval","text":"recur_on_interval() adjusts interval base frequency recurrence rule. example, monthly() rule interval 2 become \"every month\".","code":""},{"path":"/dev/reference/recur_on_interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recur on an interval — recur_on_interval","text":"","code":"recur_on_interval(x, n)"},{"path":"/dev/reference/recur_on_interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recur on an interval — recur_on_interval","text":"x [rrule] recurrence rule. n [positive integer(1)] interval recur.","code":""},{"path":"/dev/reference/recur_on_interval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recur on an interval — recur_on_interval","text":"updated rrule.","code":""},{"path":"/dev/reference/recur_on_interval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recur on an interval — recur_on_interval","text":"","code":"# The default interval is 1 on_monthly <- monthly(since = \"1999-01-01\")  alma_search(\"1999-01-01\", \"1999-06-01\", on_monthly) #> [1] \"1999-01-01\" \"1999-02-01\" \"1999-03-01\" \"1999-04-01\" \"1999-05-01\" #> [6] \"1999-06-01\"  # Adjust to every other month on_every_other_month <- on_monthly %>% recur_on_interval(2)  alma_search(\"1999-01-01\", \"1999-06-01\", on_every_other_month) #> [1] \"1999-01-01\" \"1999-03-01\" \"1999-05-01\"  # Note that the frequency is limited to \"every other month\", but you # can still have multiple events inside a single month on_every_other_month_on_mday_25_or_26 <- on_every_other_month %>%   recur_on_mday(25:26)  alma_search(\"1999-01-01\", \"1999-06-01\", on_every_other_month_on_mday_25_or_26) #> [1] \"1999-01-25\" \"1999-01-26\" \"1999-03-25\" \"1999-03-26\" \"1999-05-25\" #> [6] \"1999-05-26\""},{"path":"/dev/reference/recur_on_mday.html","id":null,"dir":"Reference","previous_headings":"","what":"Recur on a day of the month — recur_on_mday","title":"Recur on a day of the month — recur_on_mday","text":"recur_on_mday() recurs specific day month.","code":""},{"path":"/dev/reference/recur_on_mday.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recur on a day of the month — recur_on_mday","text":"","code":"recur_on_mday(x, mday)"},{"path":"/dev/reference/recur_on_mday.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recur on a day of the month — recur_on_mday","text":"x [rrule] recurrence rule. mday [integer] days month recur. Negative values allowed, specify n days end month.","code":""},{"path":"/dev/reference/recur_on_mday.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recur on a day of the month — recur_on_mday","text":"updated rrule.","code":""},{"path":"/dev/reference/recur_on_mday.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recur on a day of the month — recur_on_mday","text":"day month exist particular month, ignored. example, recur_on_mday(30) set, never generate event February.","code":""},{"path":"/dev/reference/recur_on_mday.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recur on a day of the month — recur_on_mday","text":"","code":"# When used with a yearly or monthly frequency, `recur_on_mday()` expands the # number of days in the event set. on_yearly <- yearly() on_yearly_mday_1_to_2 <- on_yearly %>% recur_on_mday(1:2)  start <- \"1999-01-01\" end <- \"2000-06-30\"  alma_search(start, end, on_yearly) #> [1] \"1999-01-01\" \"2000-01-01\" alma_search(start, end, on_yearly_mday_1_to_2) #>  [1] \"1999-01-01\" \"1999-01-02\" \"1999-02-01\" \"1999-02-02\" \"1999-03-01\" #>  [6] \"1999-03-02\" \"1999-04-01\" \"1999-04-02\" \"1999-05-01\" \"1999-05-02\" #> [11] \"1999-06-01\" \"1999-06-02\" \"1999-07-01\" \"1999-07-02\" \"1999-08-01\" #> [16] \"1999-08-02\" \"1999-09-01\" \"1999-09-02\" \"1999-10-01\" \"1999-10-02\" #> [21] \"1999-11-01\" \"1999-11-02\" \"1999-12-01\" \"1999-12-02\" \"2000-01-01\" #> [26] \"2000-01-02\" \"2000-02-01\" \"2000-02-02\" \"2000-03-01\" \"2000-03-02\" #> [31] \"2000-04-01\" \"2000-04-02\" \"2000-05-01\" \"2000-05-02\" \"2000-06-01\" #> [36] \"2000-06-02\"  # When used with a daily frequency, `recur_on_mday()` limits the number of # days in the event set. on_daily <- daily() on_daily_mday_1_to_2 <- on_daily %>% recur_on_mday(1:2)  length(alma_search(start, end, on_daily)) #> [1] 547 length(alma_search(start, end, on_daily_mday_1_to_2)) #> [1] 36  # Using a negative value is a powerful way to look back from the end of the # month. This is particularly useful because months don't have the same # number of days. on_last_of_month <- monthly() %>% recur_on_mday(-1)  alma_search(start, end, on_last_of_month) #>  [1] \"1999-01-31\" \"1999-02-28\" \"1999-03-31\" \"1999-04-30\" \"1999-05-31\" #>  [6] \"1999-06-30\" \"1999-07-31\" \"1999-08-31\" \"1999-09-30\" \"1999-10-31\" #> [11] \"1999-11-30\" \"1999-12-31\" \"2000-01-31\" \"2000-02-29\" \"2000-03-31\" #> [16] \"2000-04-30\" \"2000-05-31\" \"2000-06-30\"  # If you want particular days of the week at the end of the month, you # could use something like this, which checks if the end of the month # is also a Friday. on_last_of_month_that_is_also_friday <- on_last_of_month %>% recur_on_wday(\"Friday\") alma_search(start, end, on_last_of_month_that_is_also_friday) #> [1] \"1999-04-30\" \"1999-12-31\" \"2000-03-31\" \"2000-06-30\"  # But you probably wanted this, which takes the last friday of the month, # on whatever day that lands on on_last_friday_of_month <- monthly() %>% recur_on_wday(\"Friday\", -1) alma_search(start, end, on_last_friday_of_month) #>  [1] \"1999-01-29\" \"1999-02-26\" \"1999-03-26\" \"1999-04-30\" \"1999-05-28\" #>  [6] \"1999-06-25\" \"1999-07-30\" \"1999-08-27\" \"1999-09-24\" \"1999-10-29\" #> [11] \"1999-11-26\" \"1999-12-31\" \"2000-01-28\" \"2000-02-25\" \"2000-03-31\" #> [16] \"2000-04-28\" \"2000-05-26\" \"2000-06-30\""},{"path":"/dev/reference/recur_on_position.html","id":null,"dir":"Reference","previous_headings":"","what":"Recur on a position within a frequency — recur_on_position","title":"Recur on a position within a frequency — recur_on_position","text":"recur_on_position() fine tuned control element set select within base frequency.","code":""},{"path":"/dev/reference/recur_on_position.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recur on a position within a frequency — recur_on_position","text":"","code":"recur_on_position(x, n)"},{"path":"/dev/reference/recur_on_position.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recur on a position within a frequency — recur_on_position","text":"x [rrule] recurrence rule. n [integer] positions select within intrafrequency set. Negative numbers select end set.","code":""},{"path":"/dev/reference/recur_on_position.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recur on a position within a frequency — recur_on_position","text":"updated rrule.","code":""},{"path":"/dev/reference/recur_on_position.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recur on a position within a frequency — recur_on_position","text":"","code":"library(lubridate, warn.conflicts = FALSE)  start <- \"1999-01-01\" end <- \"1999-05-01\"  # You might want the last day of the month that is either a # Sunday or a Monday, but you don't want to return both. # This would return both: on_last_monday_and_sunday <- monthly() %>%   recur_on_wday(c(\"Monday\", \"Sunday\"), -1)  alma_search(start, end, on_last_monday_and_sunday) #> [1] \"1999-01-25\" \"1999-01-31\" \"1999-02-22\" \"1999-02-28\" \"1999-03-28\" #> [6] \"1999-03-29\" \"1999-04-25\" \"1999-04-26\"  # To return just the last one, you would select the last value in # the set, which is computed on a per month basis on_very_last_monday_or_sunday <- on_last_monday_and_sunday %>%   recur_on_position(-1)  alma_search(start, end, on_very_last_monday_or_sunday) #> [1] \"1999-01-31\" \"1999-02-28\" \"1999-03-29\" \"1999-04-26\"  wday(alma_search(start, end, on_very_last_monday_or_sunday), label = TRUE) #> [1] Sun Sun Mon Mon #> Levels: Sun < Mon < Tue < Wed < Thu < Fri < Sat"},{"path":"/dev/reference/recur_on_wday.html","id":null,"dir":"Reference","previous_headings":"","what":"Recur on a day of the week — recur_on_wday","title":"Recur on a day of the week — recur_on_wday","text":"recur_on_wday() recurs specific day week. recur_on_weekends() recur_on_weekdays() helpers recurring weekends weekdays.","code":""},{"path":"/dev/reference/recur_on_wday.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recur on a day of the week — recur_on_wday","text":"","code":"recur_on_wday(x, wday, nth = NULL)  recur_on_weekdays(x)  recur_on_weekends(x)"},{"path":"/dev/reference/recur_on_wday.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recur on a day of the week — recur_on_wday","text":"x [rrule] recurrence rule. wday [integer / character] Days week recur . Integer values must 1 7, 1 = Monday 7 = Sunday. also allowed full weekday string like \"Tuesday\", abbreviation like \"Tues\". nth [integer / NULL] Limit n-th occurrence wday base frequency. example, monthly frequency, using nth = -1 limit last wday month. default NULL chooses occurrences.","code":""},{"path":"/dev/reference/recur_on_wday.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recur on a day of the week — recur_on_wday","text":"updated rrule.","code":""},{"path":"/dev/reference/recur_on_wday.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recur on a day of the week — recur_on_wday","text":"Multiple week day values allowed, nth applied . want apply different nth values different days week, call recur_on_wday() twice different wday values. particularly important pay attention since date using weekly rules. day week use comes since date, , default, Monday (1900-01-01).","code":""},{"path":"/dev/reference/recur_on_wday.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recur on a day of the week — recur_on_wday","text":"","code":"# Using default `since` (1900-01-01, a Monday) on_weekly_mondays <- weekly()  start <- \"1999-01-01\" # <- a Friday end <- \"1999-03-01\"  # This finds the first Thursday, and then continues from there alma_search(start, end, on_weekly_mondays) #> [1] \"1999-01-04\" \"1999-01-11\" \"1999-01-18\" \"1999-01-25\" \"1999-02-01\" #> [6] \"1999-02-08\" \"1999-02-15\" \"1999-02-22\" \"1999-03-01\"  # We start counting from a Friday here on_weekly_fridays <- weekly(since = start) alma_search(start, end, on_weekly_fridays) #> [1] \"1999-01-01\" \"1999-01-08\" \"1999-01-15\" \"1999-01-22\" \"1999-01-29\" #> [6] \"1999-02-05\" \"1999-02-12\" \"1999-02-19\" \"1999-02-26\"  # Alternatively, we could use `recur_on_wday()` and force a recurrence rule # on Friday on_wday_friday <- on_weekly_mondays %>% recur_on_wday(\"Friday\") alma_search(start, end, on_wday_friday) #> [1] \"1999-01-01\" \"1999-01-08\" \"1999-01-15\" \"1999-01-22\" \"1999-01-29\" #> [6] \"1999-02-05\" \"1999-02-12\" \"1999-02-19\" \"1999-02-26\"  # At monthly frequencies, you can use n-th values to look for particular # week day events on_first_friday_in_month <- monthly() %>% recur_on_wday(\"Fri\", 1) alma_search(start, end, on_first_friday_in_month) #> [1] \"1999-01-01\" \"1999-02-05\"  # Negative values let you look from the back on_last_friday_in_month <- monthly() %>% recur_on_wday(\"Fri\", -1) alma_search(start, end, on_last_friday_in_month) #> [1] \"1999-01-29\" \"1999-02-26\"  # At yearly frequencies, this looks for the first sunday of the year on_first_sunday_in_year <- yearly() %>% recur_on_wday(\"Sunday\", 1) alma_search(start, end, on_first_sunday_in_year) #> [1] \"1999-01-03\"  # Last week day of the month last_weekday_of_month <- monthly() %>%   # Last occurrence of each weekday in the month   recur_on_wday(c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\"), -1) %>%   # Now choose the last one of those in each month   recur_on_position(-1)  alma_search(start, end, last_weekday_of_month) #> [1] \"1999-01-29\" \"1999-02-26\""},{"path":"/dev/reference/recur_on_yday.html","id":null,"dir":"Reference","previous_headings":"","what":"Recur on a day of the year — recur_on_yday","title":"Recur on a day of the year — recur_on_yday","text":"recur_on_yday() recurs specific day year.","code":""},{"path":"/dev/reference/recur_on_yday.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recur on a day of the year — recur_on_yday","text":"","code":"recur_on_yday(x, yday)"},{"path":"/dev/reference/recur_on_yday.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recur on a day of the year — recur_on_yday","text":"x [rrule] recurrence rule. yday [integer] Days year recur . Values must [-366, -1] [1, 366].","code":""},{"path":"/dev/reference/recur_on_yday.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recur on a day of the year — recur_on_yday","text":"updated rrule.","code":""},{"path":"/dev/reference/recur_on_yday.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recur on a day of the year — recur_on_yday","text":"","code":"library(lubridate, warn.conflicts = FALSE)  on_5th_day_of_year <- yearly() %>% recur_on_yday(5)  alma_search(\"1999-01-01\", \"2000-12-31\", on_5th_day_of_year) #> [1] \"1999-01-05\" \"2000-01-05\"  # Notice that if you use a `since` date that has a day of the year # after the specified one, it rolls to the next year on_5th_day_of_year2 <- yearly(since = \"1999-01-06\") %>% recur_on_yday(5) alma_search(\"1999-01-01\", \"2000-12-31\", on_5th_day_of_year2) #> [1] \"2000-01-05\"  # Negative values select from the back, which is useful in leap years leap_year(as.Date(\"2000-01-01\")) #> [1] TRUE  last_day_of_year <- yearly() %>% recur_on_yday(-1) last_day_of_year_bad <- yearly() %>% recur_on_yday(365)  alma_search(\"1999-01-01\", \"2000-12-31\", last_day_of_year) #> [1] \"1999-12-31\" \"2000-12-31\" alma_search(\"1999-01-01\", \"2000-12-31\", last_day_of_year_bad) #> [1] \"1999-12-31\" \"2000-12-30\""},{"path":"/dev/reference/recur_on_ymonth.html","id":null,"dir":"Reference","previous_headings":"","what":"Recur on a month of the year — recur_on_ymonth","title":"Recur on a month of the year — recur_on_ymonth","text":"recur_on_ymonth() recurs specific month year.","code":""},{"path":"/dev/reference/recur_on_ymonth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recur on a month of the year — recur_on_ymonth","text":"","code":"recur_on_ymonth(x, ymonth)"},{"path":"/dev/reference/recur_on_ymonth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recur on a month of the year — recur_on_ymonth","text":"x [rrule] recurrence rule. ymonth [integer / character] Months year mark events. Integer values must [1, 12]. can also full month string like \"November\", abbreviation like \"Nov\".","code":""},{"path":"/dev/reference/recur_on_ymonth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recur on a month of the year — recur_on_ymonth","text":"updated rrule.","code":""},{"path":"/dev/reference/recur_on_ymonth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recur on a month of the year — recur_on_ymonth","text":"","code":"# There is a big difference between adding this rule to a `yearly()` # or `monthly()` frequency, and a `daily()` frequency.  # Limit from every day to every day in February on_feb_daily <- daily() %>% recur_on_ymonth(\"Feb\")  # Limit from 1 day per month to 1 day in February on_feb_monthly <- monthly() %>% recur_on_ymonth(\"Feb\")  start <- \"1999-01-01\" end <- \"2001-01-01\"  alma_search(start, end, on_feb_daily) #>  [1] \"1999-02-01\" \"1999-02-02\" \"1999-02-03\" \"1999-02-04\" \"1999-02-05\" #>  [6] \"1999-02-06\" \"1999-02-07\" \"1999-02-08\" \"1999-02-09\" \"1999-02-10\" #> [11] \"1999-02-11\" \"1999-02-12\" \"1999-02-13\" \"1999-02-14\" \"1999-02-15\" #> [16] \"1999-02-16\" \"1999-02-17\" \"1999-02-18\" \"1999-02-19\" \"1999-02-20\" #> [21] \"1999-02-21\" \"1999-02-22\" \"1999-02-23\" \"1999-02-24\" \"1999-02-25\" #> [26] \"1999-02-26\" \"1999-02-27\" \"1999-02-28\" \"2000-02-01\" \"2000-02-02\" #> [31] \"2000-02-03\" \"2000-02-04\" \"2000-02-05\" \"2000-02-06\" \"2000-02-07\" #> [36] \"2000-02-08\" \"2000-02-09\" \"2000-02-10\" \"2000-02-11\" \"2000-02-12\" #> [41] \"2000-02-13\" \"2000-02-14\" \"2000-02-15\" \"2000-02-16\" \"2000-02-17\" #> [46] \"2000-02-18\" \"2000-02-19\" \"2000-02-20\" \"2000-02-21\" \"2000-02-22\" #> [51] \"2000-02-23\" \"2000-02-24\" \"2000-02-25\" \"2000-02-26\" \"2000-02-27\" #> [56] \"2000-02-28\" \"2000-02-29\"  alma_search(start, end, on_feb_monthly) #> [1] \"1999-02-01\" \"2000-02-01\""},{"path":"/dev/reference/recur_on_yweek.html","id":null,"dir":"Reference","previous_headings":"","what":"Recur on a week of the year — recur_on_yweek","title":"Recur on a week of the year — recur_on_yweek","text":"recur_on_yweek() recurs specific week year.","code":""},{"path":"/dev/reference/recur_on_yweek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recur on a week of the year — recur_on_yweek","text":"","code":"recur_on_yweek(x, yweek)"},{"path":"/dev/reference/recur_on_yweek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recur on a week of the year — recur_on_yweek","text":"x [rrule] recurrence rule. yweek [integer] Weeks year recur . Integer values must [1, 53] [-53, -1].","code":""},{"path":"/dev/reference/recur_on_yweek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recur on a week of the year — recur_on_yweek","text":"updated rrule.","code":""},{"path":"/dev/reference/recur_on_yweek.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recur on a week of the year — recur_on_yweek","text":"Weekly rules implemented according ISO-8601 standard. requires first week year first one containing least 4 days new year. Additionally, week start week day specified recur_with_week_start(), defaults Monday.","code":""},{"path":"/dev/reference/recur_on_yweek.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recur on a week of the year — recur_on_yweek","text":"","code":"# Weekly rules are a bit tricky because they are implemented to comply # with ISO-8601 standards, which require that the first week of the year # is when there are at least 4 days in that year, and the week starts on # the week day specified by `recur_with_week_start()` (Monday by default). on_first_week <- yearly() %>% recur_on_yweek(1)  # In 2017: # - Look at dates 1-4 # - 2017-01-02 is a Monday, so start the first week here alma_search(\"2017-01-01\", \"2017-01-25\", on_first_week) #> [1] \"2017-01-02\" \"2017-01-03\" \"2017-01-04\" \"2017-01-05\" \"2017-01-06\" #> [6] \"2017-01-07\" \"2017-01-08\"  # In 2015: # - Look at dates 1-4 # - None of these are Monday, so the start of the week is #   in the previous year # - Look at 2014 and find the last Monday, 2014-12-29. This is the start of #   the first week in 2015. alma_search(\"2014-12-25\", \"2015-01-25\", on_first_week) #> [1] \"2014-12-29\" \"2014-12-30\" \"2014-12-31\" \"2015-01-01\" \"2015-01-02\" #> [6] \"2015-01-03\" \"2015-01-04\"  # Say we want the start of the week to be Sunday instead of Monday!  # In 2015: # - Look at dates 1-4 # - 2015-01-04 is a Sunday, so start the first week here on_first_week_sun <- yearly() %>%   recur_on_yweek(1) %>%   recur_with_week_start(\"Sunday\")  alma_search(\"2014-12-25\", \"2015-01-25\", on_first_week_sun) #> [1] \"2015-01-04\" \"2015-01-05\" \"2015-01-06\" \"2015-01-07\" \"2015-01-08\" #> [6] \"2015-01-09\" \"2015-01-10\""},{"path":"/dev/reference/recur_with_week_start.html","id":null,"dir":"Reference","previous_headings":"","what":"Control the start of the week — recur_with_week_start","title":"Control the start of the week — recur_with_week_start","text":"recur_with_week_start() controls week day represents start week. important rules use recur_on_yweek(). default day week start Monday.","code":""},{"path":"/dev/reference/recur_with_week_start.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control the start of the week — recur_with_week_start","text":"","code":"recur_with_week_start(x, wday)"},{"path":"/dev/reference/recur_with_week_start.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control the start of the week — recur_with_week_start","text":"x [rrule] recurrence rule. wday [integer(1) / character(1)] Day week start week . Must integer value [1, 7], 1 = Monday 7 = Sunday. also allowed full weekday string like \"Tuesday\", abbreviation like \"Tues\".","code":""},{"path":"/dev/reference/recur_with_week_start.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control the start of the week — recur_with_week_start","text":"updated rrule.","code":""},{"path":"/dev/reference/recur_with_week_start.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control the start of the week — recur_with_week_start","text":"","code":"# Weekly rules are a bit tricky because they are implemented to comply # with ISO-8601 standards, which require that the first week of the year # is when there are at least 4 days in that year, and the week starts on # the week day specified by `recur_with_week_start()` (Monday by default). on_first_week <- yearly() %>% recur_on_yweek(1)  # In 2017: # - Look at dates 1-4 # - 2017-01-02 is a Monday, so start the first week here alma_search(\"2017-01-01\", \"2017-01-25\", on_first_week) #> [1] \"2017-01-02\" \"2017-01-03\" \"2017-01-04\" \"2017-01-05\" \"2017-01-06\" #> [6] \"2017-01-07\" \"2017-01-08\"  # In 2015: # - Look at dates 1-4 # - None of these are Monday, so the start of the week is #   in the previous year # - Look at 2014 and find the last Monday, 2014-12-29. This is the start of #   the first week in 2015. alma_search(\"2014-12-25\", \"2015-01-25\", on_first_week) #> [1] \"2014-12-29\" \"2014-12-30\" \"2014-12-31\" \"2015-01-01\" \"2015-01-02\" #> [6] \"2015-01-03\" \"2015-01-04\"  # Say we want the start of the week to be Sunday instead of Monday!  # In 2015: # - Look at dates 1-4 # - 2015-01-04 is a Sunday, so start the first week here on_first_week_sun <- yearly() %>%   recur_on_yweek(1) %>%   recur_with_week_start(\"Sunday\")  alma_search(\"2014-12-25\", \"2015-01-25\", on_first_week_sun) #> [1] \"2015-01-04\" \"2015-01-05\" \"2015-01-06\" \"2015-01-07\" \"2015-01-08\" #> [6] \"2015-01-09\" \"2015-01-10\""},{"path":"/dev/reference/rrule.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a recurrence rule — rrule","title":"Create a recurrence rule — rrule","text":"functions allow create recurrence rule specified frequency. base elements recurrence rules. add , use one recur_*() functions. daily() Recur daily frequency. weekly() Recur weekly frequency. monthly() Recur monthly frequency. yearly() Recur yearly frequency.","code":""},{"path":"/dev/reference/rrule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a recurrence rule — rrule","text":"","code":"daily(since = \"1900-01-01\", until = \"2100-01-01\")  weekly(since = \"1900-01-01\", until = \"2100-01-01\")  monthly(since = \"1900-01-01\", until = \"2100-01-01\")  yearly(since = \"1900-01-01\", until = \"2100-01-01\")"},{"path":"/dev/reference/rrule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a recurrence rule — rrule","text":"since [Date(1)] lower bound event set. Depending final recurrence rule, pieces information anchor date might used generate complete recurrence rule. [Date(1)] upper bound event set.","code":""},{"path":"/dev/reference/rrule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a recurrence rule — rrule","text":"new empty rrule.","code":""},{"path":"/dev/reference/rrule.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a recurrence rule — rrule","text":"default, since == \"1900-01-01\" == \"2100-01-01\", capture use cases well still performant. may need adjust dates want events outside range. terms speed, generally efficient adjust since date closer first date sequence dates working . example, working dates range 2019 forward, adjust since date 2019-01-01 significant speed boost. anchor date, events often calculated relative date. example, rule \"Monday, every week\" use since date find first Monday start recurrence . quarterly() recurrence frequency, can accomplished monthly() %>% recur_on_interval(3). month start quarterly interval pulled since date inside monthly(). default use quarterly rule starting January since default since date 1900-01-01. See examples.","code":""},{"path":"/dev/reference/rrule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a recurrence rule — rrule","text":"","code":"rrule <- monthly() %>% recur_on_mday(25)  alma_search(\"1970-01-01\", \"1971-01-01\", rrule) #>  [1] \"1970-01-25\" \"1970-02-25\" \"1970-03-25\" \"1970-04-25\" \"1970-05-25\" #>  [6] \"1970-06-25\" \"1970-07-25\" \"1970-08-25\" \"1970-09-25\" \"1970-10-25\" #> [11] \"1970-11-25\" \"1970-12-25\"  # Notice that dates before 1900-01-01 are never generated with the defaults! alma_search(\"1899-01-01\", \"1901-01-01\", rrule) #>  [1] \"1900-01-25\" \"1900-02-25\" \"1900-03-25\" \"1900-04-25\" \"1900-05-25\" #>  [6] \"1900-06-25\" \"1900-07-25\" \"1900-08-25\" \"1900-09-25\" \"1900-10-25\" #> [11] \"1900-11-25\" \"1900-12-25\"  # Adjust the `since` date to get access to these dates rrule_pre_1900 <- monthly(since = \"1850-01-01\") %>% recur_on_mday(25) alma_search(\"1899-01-01\", \"1901-01-01\", rrule_pre_1900) #>  [1] \"1899-01-25\" \"1899-02-25\" \"1899-03-25\" \"1899-04-25\" \"1899-05-25\" #>  [6] \"1899-06-25\" \"1899-07-25\" \"1899-08-25\" \"1899-09-25\" \"1899-10-25\" #> [11] \"1899-11-25\" \"1899-12-25\" \"1900-01-25\" \"1900-02-25\" \"1900-03-25\" #> [16] \"1900-04-25\" \"1900-05-25\" \"1900-06-25\" \"1900-07-25\" \"1900-08-25\" #> [21] \"1900-09-25\" \"1900-10-25\" \"1900-11-25\" \"1900-12-25\"  # A quarterly recurrence rule can be built from # `monthly()` and `recur_on_interval()` on_first_of_the_quarter <- monthly() %>%   recur_on_interval(3) %>%   recur_on_mday(1)  alma_search(\"1999-01-01\", \"2000-04-01\", on_first_of_the_quarter) #> [1] \"1999-01-01\" \"1999-04-01\" \"1999-07-01\" \"1999-10-01\" \"2000-01-01\" #> [6] \"2000-04-01\"  # Alter the starting quarter by altering the `since` date on_first_of_the_quarter_starting_in_feb <- monthly(since = \"1998-02-01\") %>%   recur_on_interval(3) %>%   recur_on_mday(1)  alma_search(   \"1999-01-01\",   \"2000-04-01\",   on_first_of_the_quarter_starting_in_feb ) #> [1] \"1999-02-01\" \"1999-05-01\" \"1999-08-01\" \"1999-11-01\" \"2000-02-01\""},{"path":"/dev/reference/stepper.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new stepper — stepper","title":"Create a new stepper — stepper","text":"stepper() returns function can used add subtract number days Date, \"stepping\" events specified rschedule. supply rschedule step relative , call returned function number days step . workdays() convenient stepper stepping weekend. %s+% steps forwards. %s-% steps backwards. must use %s+ %s-% control stepping. + - work due limitations R's S3 dispatch system. Alternatively, can call vctrs::vec_arith() directly, powers %s+% correct double dispatch implementation.","code":""},{"path":"/dev/reference/stepper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new stepper — stepper","text":"","code":"stepper(rschedule)  x %s+% y  x %s-% y  workdays(n, since = \"1900-01-01\", until = \"2100-01-01\")"},{"path":"/dev/reference/stepper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new stepper — stepper","text":"rschedule [rschedule] rschedule, rrule rbundle. x, y [objects] Objects perform step arithmetic . Typically Dates steppers. n [integer] number days step. Can negative step backwards. since [Date(1)] lower bound event set. Depending final recurrence rule, pieces information anchor date might used generate complete recurrence rule. [Date(1)] upper bound event set.","code":""},{"path":"/dev/reference/stepper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new stepper — stepper","text":"stepper() returns function 1 argument, n, can used step n days, relative rschedule. workdays() return new stepper object. %s+% %s-% return new shifted Date vector.","code":""},{"path":"/dev/reference/stepper.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a new stepper — stepper","text":"Internally, stepper just powered alma_step(), feel free use directly.","code":""},{"path":"/dev/reference/stepper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new stepper — stepper","text":"","code":"# A Thursday and Friday x <- as.Date(c(\"1970-01-01\", \"1970-01-02\"))  # Thursday is stepped forward 1 working day to Friday, # and then 1 more working day to Monday. # Friday is stepped forward 1 working day to Monday, # and then 1 more working day to Tuesday x %s+% workdays(2) #> [1] \"1970-01-05\" \"1970-01-06\"  # ---------------------------------------------------------------------------  on_weekends <- weekly() %>%   recur_on_weekends()  on_christmas <- yearly() %>%   recur_on_mday(25) %>%   recur_on_ymonth(\"Dec\")  rb <- runion() %>%   add_rschedule(on_weekends) %>%   add_rschedule(on_christmas)  workday <- stepper(rb)  # Friday before Christmas, which was on a Monday friday_before_christmas <- as.Date(\"2000-12-22\")  # Steps over the weekend and Christmas to the following Tuesday friday_before_christmas %s+% workday(1) #> [1] \"2000-12-26\"  # ---------------------------------------------------------------------------  # Christmas in 2005 was on a Sunday, but your company probably \"observed\" # it on Monday. So when you are on the Friday before Christmas in 2005, # stepping forward 1 working day should go to Tuesday.  # We'll adjust the previous rule for Christmas to roll to the nearest # non-weekend day, if it happened to fall on a weekend. on_observed_christmas <- radjusted(   on_christmas,   adjust_on = on_weekends,   adjustment = adj_nearest )  # Note that the \"observed\" date for Christmas is the 26th alma_search(\"2005-01-01\", \"2006-01-01\", on_observed_christmas) #> [1] \"2005-12-26\"  rb2 <- runion() %>%   add_rschedule(on_weekends) %>%   add_rschedule(on_observed_christmas)  workday2 <- stepper(rb2)  friday_before_christmas_2005 <- as.Date(\"2005-12-23\")  # Steps over the weekend and the observed Christmas date # of 2005-12-26 to Tuesday the 27th. friday_before_christmas_2005 %s+% workday2(1) #> [1] \"2005-12-27\""},{"path":"/dev/news/index.html","id":"almanac-development-version","dir":"Changelog","previous_headings":"","what":"almanac (development version)","title":"almanac (development version)","text":"Updated internal JavaScript rrule library version 2.7.2 (#82). almanac steppers created stepper() now work ..arguments slider::slide_index() friends (#80). R >=3.5.0 now required, line tidyverse standards.","code":""},{"path":"/dev/news/index.html","id":"almanac-011","dir":"Changelog","previous_headings":"","what":"almanac 0.1.1","title":"almanac 0.1.1","text":"CRAN release: 2020-05-28 Explicitly imports R6::R6Class() V8::v8() avoid R CMD Check false alarms (#74). Fix USBAN error casting NA_real_ NaN integer (#72).","code":""},{"path":"/dev/news/index.html","id":"almanac-010","dir":"Changelog","previous_headings":"","what":"almanac 0.1.0","title":"almanac 0.1.0","text":"CRAN release: 2020-05-27 Added NEWS.md file track changes package.","code":""}]
