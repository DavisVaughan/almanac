% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rr-on-easter.R
\name{rr_on_easter}
\alias{rr_on_easter}
\title{Schedule a recurrence on easter}
\usage{
rr_on_easter(x, offset = 0L)
}
\arguments{
\item{x}{\code{[rrule]}

A recurrence rule.}

\item{offset}{\code{[integer(1)]}

An offset in terms of a number of days on either side of Easter to recur
on. This offset must still fall within the same year, otherwise the date
will be silently ignored.}
}
\description{
\code{rr_on_easter()} is a special helper to recur on Easter. Easter is
particularly difficult to construct a recurrence rule for. Using \code{offset},
this can also be used to generate a recurrence on Easter Monday or
Good Friday.
}
\examples{
library(magrittr)

on_easter <- yearly() \%>\% rr_on_easter()
on_easter_monday <- yearly() \%>\% rr_on_easter(-1)

sch_seq("1999-01-01", "2001-01-01", on_easter)

sch <- schedule() \%>\%
  sch_add_rrule(on_easter) \%>\%
  sch_add_rrule(on_easter_monday)

sch_seq("1999-01-01", "2001-01-01", sch)


# Note that `offset` must land within the same year, otherwise the date
# is ignored
on_easter_back_93_days <- yearly() \%>\% rr_on_easter(-93)
on_easter_back_94_days <- yearly() \%>\% rr_on_easter(-94)

sch_seq("1999-01-01", "2001-01-01", on_easter_back_93_days)
sch_seq("1999-01-01", "2001-01-01", on_easter_back_94_days)

}
